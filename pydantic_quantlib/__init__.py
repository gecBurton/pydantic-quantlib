"""Top-level package for Pydantic QuantLib."""
from __future__ import annotations

__author__ = """George EC Burton"""
__email__ = "g.e.c.burton@gmail.com"
__version__ = "0.1.0"


# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2021-01-03T20:14:28+00:00


from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import Field, conint

from .core import BaseModel


class TimeUnit(Enum):
    Days = 0
    Weeks = 1
    Months = 2
    Years = 3
    Hours = 4
    Minutes = 5
    Seconds = 6
    Milliseconds = 7


class OptionType(Enum):
    Call = 1
    Put = -1


class BusinessDayConvention(Enum):
    Following = 0
    ModifiedFollowing = 1
    Preceding = 2
    ModifiedPreceding = 3
    Unadjusted = 4
    HalfMonthModifiedFollowing = 5
    Nearest = 6


class DateGenerationRule(Enum):
    Backward = 0
    Forward = 1
    Zero = 2
    ThirdWednesday = 3
    Twentieth = 4
    TwentiethIMM = 5
    OldCDS = 6
    CDS = 7
    CDS2015 = 8


class Compounding(Enum):
    Simple = 0
    Compounded = 1
    Continuous = 2
    SimpleThenCompounded = 3
    CompoundedThenSimple = 4


class ActualActualConvention(Enum):
    None_0 = 0
    None_1 = 1


class CallabilityPriceType(Enum):
    None_0 = 0
    None_1 = 1


class CallabilityType(Enum):
    None_0 = 0
    None_1 = 1


class VanillaSwapType(Enum):
    None_0 = 0
    None_1 = 1


class Market(Enum):
    None_0 = 0
    None_1 = 1
    None_2 = 2
    None_3 = 3


class SwigSwigPtrPyObject(BaseModel):
    pass


class SwigSwigVarPyObject(BaseModel):
    pass


class SwigStopIteration(BaseModel):
    pass


class StdBadCast(BaseModel):
    pass


class StdBadException(BaseModel):
    pass


class StdDomainError(BaseModel):
    pass


class StdException(BaseModel):
    pass


class StdInvalidArgument(BaseModel):
    pass


class StdLengthError(BaseModel):
    pass


class StdLogicError(BaseModel):
    pass


class StdOutOfRange(BaseModel):
    pass


class StdOverflowError(BaseModel):
    pass


class StdRangeError(BaseModel):
    pass


class StdRuntimeError(BaseModel):
    pass


class StdUnderflowError(BaseModel):
    pass


class Period(BaseModel):
    n: Optional[int] = None
    units: Optional[TimeUnit] = None


class Date(BaseModel):
    d: conint(ge=1, le=31)  # type: ignore
    m: conint(ge=1, le=12)  # type: ignore
    y: conint(ge=1900, le=2999)  # type: ignore


class DateParser(BaseModel):
    pass


class PeriodParser(BaseModel):
    pass


class IMM(BaseModel):
    pass


class ASX(BaseModel):
    pass


class EuropeanExercise(BaseModel):
    date: Date


class AmericanExercise(BaseModel):
    earliestDate: Date
    latestDate: Date
    payoffAtExpiry: Optional[bool] = None


class BermudanExercise(BaseModel):
    dates: List[Date]
    payoffAtExpiry: Optional[bool] = None


class SwingExercise(BaseModel):
    dates: List[Date]


class Observable(BaseModel):
    pass


class Array(BaseModel):
    n: Optional[int] = None
    fill: Optional[float] = None


class DefaultLexicographicalViewColumn(BaseModel):
    pass


class DefaultLexicographicalView(BaseModel):
    pass


class MatrixRow(BaseModel):
    pass


class Matrix(BaseModel):
    rows: Optional[int] = None
    columns: Optional[int] = None
    fill: Optional[float] = None


class SalvagingAlgorithm(BaseModel):
    pass


class SVD(BaseModel):
    value: Matrix


class BiCGstab(BaseModel):
    pass


class GMRES(BaseModel):
    pass


class Quote(BaseModel):
    pass


class QuoteHandle(BaseModel):
    value: Optional[QUOTE] = None


class SimpleQuote(BaseModel):
    value: float


class DerivedQuote(BaseModel):
    pass


class CompositeQuote(BaseModel):
    pass


class Calendar(BaseModel):
    pass


class Argentina(BaseModel):
    m: Optional[Market] = None


class Australia(BaseModel):
    pass


class Brazil(BaseModel):
    m: Optional[Market] = None


class Canada(BaseModel):
    m: Optional[Market] = None


class China(BaseModel):
    m: Optional[Market] = None


class CzechRepublic(BaseModel):
    m: Optional[Market] = None


class Denmark(BaseModel):
    pass


class Finland(BaseModel):
    pass


class France(BaseModel):
    m: Optional[Market] = None


class Germany(BaseModel):
    m: Optional[Market] = None


class HongKong(BaseModel):
    m: Optional[Market] = None


class Hungary(BaseModel):
    pass


class Iceland(BaseModel):
    m: Optional[Market] = None


class India(BaseModel):
    m: Optional[Market] = None


class Indonesia(BaseModel):
    m: Optional[Market] = None


class Israel(BaseModel):
    m: Optional[Market] = None


class Italy(BaseModel):
    m: Optional[Market] = None


class Japan(BaseModel):
    pass


class Mexico(BaseModel):
    m: Optional[Market] = None


class NewZealand(BaseModel):
    pass


class Norway(BaseModel):
    pass


class Poland(BaseModel):
    pass


class Russia(BaseModel):
    m: Optional[Market] = None


class Romania(BaseModel):
    pass


class SaudiArabia(BaseModel):
    m: Optional[Market] = None


class Singapore(BaseModel):
    m: Optional[Market] = None


class Slovakia(BaseModel):
    m: Optional[Market] = None


class SouthAfrica(BaseModel):
    pass


class SouthKorea(BaseModel):
    m: Optional[Market] = None


class Sweden(BaseModel):
    pass


class Switzerland(BaseModel):
    pass


class Taiwan(BaseModel):
    m: Optional[Market] = None


class TARGET(BaseModel):
    pass


class Thailand(BaseModel):
    pass


class Turkey(BaseModel):
    pass


class Ukraine(BaseModel):
    m: Optional[Market] = None


class UnitedKingdom(BaseModel):
    m: Optional[Market] = None


class UnitedStates(BaseModel):
    m: Optional[Market] = None


class NullCalendar(BaseModel):
    pass


class WeekendsOnly(BaseModel):
    pass


class BespokeCalendar(BaseModel):
    name: str


class DayCounter(BaseModel):
    pass


class Actual360(BaseModel):
    includeLastDay: Optional[bool] = None


class OneDayCounter(BaseModel):
    pass


class SimpleDayCounter(BaseModel):
    pass


class Business252(BaseModel):
    c: Optional[CALENDAR] = None


class InterestRate(BaseModel):
    r: Optional[float] = None
    dc: Optional[DAYCOUNTER] = None
    comp: Optional[Compounding] = None
    freq: Optional[float] = None


class Rounding(BaseModel):
    pass


class UpRounding(BaseModel):
    precision: int
    digit: Optional[int] = None


class DownRounding(BaseModel):
    precision: int
    digit: Optional[int] = None


class ClosestRounding(BaseModel):
    precision: int
    digit: Optional[int] = None


class CeilingTruncation(BaseModel):
    precision: int
    digit: Optional[int] = None


class FloorTruncation(BaseModel):
    precision: int
    digit: Optional[int] = None


class Currency(BaseModel):
    pass


class ARSCurrency(BaseModel):
    pass


class ATSCurrency(BaseModel):
    pass


class AUDCurrency(BaseModel):
    pass


class BDTCurrency(BaseModel):
    pass


class BEFCurrency(BaseModel):
    pass


class BGLCurrency(BaseModel):
    pass


class BRLCurrency(BaseModel):
    pass


class BYRCurrency(BaseModel):
    pass


class CADCurrency(BaseModel):
    pass


class CHFCurrency(BaseModel):
    pass


class CLPCurrency(BaseModel):
    pass


class CNYCurrency(BaseModel):
    pass


class COPCurrency(BaseModel):
    pass


class CYPCurrency(BaseModel):
    pass


class CZKCurrency(BaseModel):
    pass


class DEMCurrency(BaseModel):
    pass


class DKKCurrency(BaseModel):
    pass


class EEKCurrency(BaseModel):
    pass


class ESPCurrency(BaseModel):
    pass


class EURCurrency(BaseModel):
    pass


class FIMCurrency(BaseModel):
    pass


class FRFCurrency(BaseModel):
    pass


class GBPCurrency(BaseModel):
    pass


class GRDCurrency(BaseModel):
    pass


class HKDCurrency(BaseModel):
    pass


class HUFCurrency(BaseModel):
    pass


class IEPCurrency(BaseModel):
    pass


class IDRCurrency(BaseModel):
    pass


class ILSCurrency(BaseModel):
    pass


class INRCurrency(BaseModel):
    pass


class IQDCurrency(BaseModel):
    pass


class IRRCurrency(BaseModel):
    pass


class ISKCurrency(BaseModel):
    pass


class ITLCurrency(BaseModel):
    pass


class JPYCurrency(BaseModel):
    pass


class KRWCurrency(BaseModel):
    pass


class KWDCurrency(BaseModel):
    pass


class LTLCurrency(BaseModel):
    pass


class LUFCurrency(BaseModel):
    pass


class LVLCurrency(BaseModel):
    pass


class MTLCurrency(BaseModel):
    pass


class MXNCurrency(BaseModel):
    pass


class MYRCurrency(BaseModel):
    pass


class NLGCurrency(BaseModel):
    pass


class NOKCurrency(BaseModel):
    pass


class NPRCurrency(BaseModel):
    pass


class NZDCurrency(BaseModel):
    pass


class PEHCurrency(BaseModel):
    pass


class PEICurrency(BaseModel):
    pass


class PENCurrency(BaseModel):
    pass


class PKRCurrency(BaseModel):
    pass


class PLNCurrency(BaseModel):
    pass


class PTECurrency(BaseModel):
    pass


class ROLCurrency(BaseModel):
    pass


class RONCurrency(BaseModel):
    pass


class RUBCurrency(BaseModel):
    pass


class SARCurrency(BaseModel):
    pass


class SEKCurrency(BaseModel):
    pass


class SGDCurrency(BaseModel):
    pass


class SITCurrency(BaseModel):
    pass


class SKKCurrency(BaseModel):
    pass


class THBCurrency(BaseModel):
    pass


class TRLCurrency(BaseModel):
    pass


class TRYCurrency(BaseModel):
    pass


class TTDCurrency(BaseModel):
    pass


class TWDCurrency(BaseModel):
    pass


class USDCurrency(BaseModel):
    pass


class VEBCurrency(BaseModel):
    pass


class VNDCurrency(BaseModel):
    pass


class ZARCurrency(BaseModel):
    pass


class SafeLinearInterpolation(BaseModel):
    x: Array
    y: Array


class SafeLogLinearInterpolation(BaseModel):
    x: Array
    y: Array


class SafeBackwardFlatInterpolation(BaseModel):
    x: Array
    y: Array


class SafeForwardFlatInterpolation(BaseModel):
    x: Array
    y: Array


class SafeCubicNaturalSpline(BaseModel):
    x: Array
    y: Array


class SafeLogCubicNaturalSpline(BaseModel):
    x: Array
    y: Array


class SafeMonotonicCubicNaturalSpline(BaseModel):
    x: Array
    y: Array


class SafeMonotonicLogCubicNaturalSpline(BaseModel):
    x: Array
    y: Array


class SafeKrugerCubic(BaseModel):
    x: Array
    y: Array


class SafeKrugerLogCubic(BaseModel):
    x: Array
    y: Array


class SafeFritschButlandCubic(BaseModel):
    x: Array
    y: Array


class SafeFritschButlandLogCubic(BaseModel):
    x: Array
    y: Array


class SafeParabolic(BaseModel):
    x: Array
    y: Array


class SafeLogParabolic(BaseModel):
    x: Array
    y: Array


class SafeMonotonicParabolic(BaseModel):
    x: Array
    y: Array


class SafeMonotonicLogParabolic(BaseModel):
    x: Array
    y: Array


class SafeBilinearInterpolation(BaseModel):
    x: Array
    y: Array
    m: Matrix


class SafeBicubicSpline(BaseModel):
    x: Array
    y: Array
    m: Matrix


class BackwardFlat(BaseModel):
    pass


class ForwardFlat(BaseModel):
    pass


class Linear(BaseModel):
    pass


class LogLinear(BaseModel):
    pass


class Cubic(BaseModel):
    pass


class MonotonicCubic(BaseModel):
    pass


class DefaultLogCubic(BaseModel):
    pass


class MonotonicLogCubic(BaseModel):
    pass


class SplineCubic(BaseModel):
    pass


class Kruger(BaseModel):
    pass


class KrugerLog(BaseModel):
    pass


class ConvexMonotone(BaseModel):
    quadraticity: Optional[float] = None
    monotonicity: Optional[float] = None
    forcePositive: Optional[bool] = None


class RichardsonExtrapolation(BaseModel):
    pass


class SafeConvexMonotoneInterpolation(BaseModel):
    x: Array
    y: Array
    quadraticity: Optional[float] = None
    monotonicity: Optional[float] = None
    forcePositive: Optional[bool] = None


class TermStructure(BaseModel):
    pass


class YieldTermStructure(BaseModel):
    pass


class YieldTermStructureHandle(BaseModel):
    value: Optional[YIELDTERMSTRUCTURE] = None


class ImpliedTermStructure(BaseModel):
    curveHandle: YieldTermStructureHandle
    referenceDate: Date


class ZeroSpreadedTermStructure(BaseModel):
    curveHandle: YieldTermStructureHandle
    spreadHandle: QuoteHandle
    comp: Optional[Compounding] = None
    freq: Optional[float] = None
    dc: Optional[DAYCOUNTER] = None


class ForwardSpreadedTermStructure(BaseModel):
    curveHandle: YieldTermStructureHandle
    spreadHandle: QuoteHandle


class FlatForward(BaseModel):
    referenceDate: Date
    forward: float
    dayCounter: DAYCOUNTER
    compounding: Optional[Compounding] = None
    frequency: Optional[float] = None


class IntervalPrice(BaseModel):
    arg_0: float
    arg_1: float
    arg_2: float
    arg_3: float


class IndexManager(BaseModel):
    pass


class Index(BaseModel):
    pass


class InterestRateIndex(BaseModel):
    pass


class IborIndex(BaseModel):
    familyName: str
    tenor: Period
    settlementDays: int
    currency: CURRENCY
    calendar: CALENDAR
    convention: BusinessDayConvention
    endOfMonth: bool
    dayCounter: DAYCOUNTER
    h: Optional[YieldTermStructureHandle] = None


class OvernightIndex(BaseModel):
    familyName: str
    settlementDays: int
    currency: CURRENCY
    calendar: CALENDAR
    dayCounter: DAYCOUNTER
    h: Optional[YieldTermStructureHandle] = None


class Libor(BaseModel):
    familyName: str
    tenor: Period
    settlementDays: float
    currency: CURRENCY
    financialCenterCalendar: CALENDAR
    dayCounter: DAYCOUNTER
    h: Optional[YieldTermStructureHandle] = None


class DailyTenorLibor(BaseModel):
    familyName: str
    settlementDays: float
    currency: CURRENCY
    financialCenterCalendar: CALENDAR
    dayCounter: DAYCOUNTER
    h: Optional[YieldTermStructureHandle] = None


class SwapIndex(BaseModel):
    familyName: str
    tenor: Period
    settlementDays: int
    currency: CURRENCY
    calendar: CALENDAR
    fixedLegTenor: Period
    fixedLegConvention: BusinessDayConvention
    fixedLegDayCounter: DAYCOUNTER
    iborIndex: IBORINDEX
    discountCurve: Optional[YieldTermStructureHandle] = None


class SwapSpreadIndex(BaseModel):
    familyName: str
    swapIndex1: SWAPINDEX
    swapIndex2: SWAPINDEX
    gearing1: Optional[float] = None
    gearing2: Optional[float] = None


class AUDLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class CADLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class CADLiborON(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Cdor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class CHFLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class DKKLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Bbsw(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Bbsw1M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bbsw2M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bbsw3M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bbsw4M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bbsw5M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bbsw6M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bkbm(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Bkbm1M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bkbm2M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bkbm3M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bkbm4M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bkbm5M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bkbm6M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class EuriborSW(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor2W(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3W(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor1M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor2M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor4M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor5M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor6M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor7M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor8M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor9M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor10M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor11M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor1Y(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor365(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Euribor365SW(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3652W(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3653W(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3651M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3652M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3653M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3654M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3655M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3656M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3657M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3658M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3659M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor36510M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor36511M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Euribor3651Y(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class EURLiborSW(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor2W(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor1M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor2M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor3M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor4M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor5M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor6M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor7M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor8M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor9M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor10M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor11M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EURLibor1Y(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class GBPLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class GBPLiborON(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Jibar(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class JPYLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Mosprime(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class NZDLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Pribor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Robor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class SEKLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Shibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Tibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class THBFIX(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class TRLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class USDLibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class USDLiborON(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Wibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Zibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Aonia(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Eonia(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Sonia(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class FedFunds(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Nzocr(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Sofr(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class EuriborSwapIsdaFixA(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class EuriborSwapIsdaFixB(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class EuriborSwapIfrFix(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class EurLiborSwapIsdaFixA(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class EurLiborSwapIsdaFixB(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class EurLiborSwapIfrFix(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class ChfLiborSwapIsdaFix(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class GbpLiborSwapIsdaFix(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class JpyLiborSwapIsdaFixAm(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class JpyLiborSwapIsdaFixPm(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class UsdLiborSwapIsdaFixAm(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class UsdLiborSwapIsdaFixPm(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class Bibor(BaseModel):
    tenor: Period
    h: Optional[YieldTermStructureHandle] = None


class BiborSW(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bibor1M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bibor2M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bibor3M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bibor6M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bibor9M(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Bibor1Y(BaseModel):
    h: Optional[YieldTermStructureHandle] = None


class Brent(BaseModel):
    pass


class Bisection(BaseModel):
    pass


class FalsePosition(BaseModel):
    pass


class Ridder(BaseModel):
    pass


class Secant(BaseModel):
    pass


class Newton(BaseModel):
    pass


class NewtonSafe(BaseModel):
    pass


class Constraint(BaseModel):
    pass


class BoundaryConstraint(BaseModel):
    lower: float
    upper: float


class NoConstraint(BaseModel):
    pass


class PositiveConstraint(BaseModel):
    pass


class CompositeConstraint(BaseModel):
    c1: CONSTRAINT
    c2: CONSTRAINT


class NonhomogeneousBoundaryConstraint(BaseModel):
    l: Array
    u: Array


class EndCriteria(BaseModel):
    maxIteration: int
    maxStationaryStateIterations: int
    rootEpsilon: float
    functionEpsilon: float
    gradientNormEpsilon: float


class OptimizationMethod(BaseModel):
    pass


class ConjugateGradient(BaseModel):
    pass


class Simplex(BaseModel):
    lambda_: float = Field(..., alias="lambda")


class SteepestDescent(BaseModel):
    pass


class BFGS(BaseModel):
    pass


class LevenbergMarquardt(BaseModel):
    epsfcn: Optional[float] = None
    xtol: Optional[float] = None
    gtol: Optional[float] = None
    useCostFunctionsJacobian: Optional[bool] = None


class DifferentialEvolution(BaseModel):
    pass


class SamplerGaussian(BaseModel):
    seed: Optional[int] = None


class SamplerLogNormal(BaseModel):
    seed: Optional[int] = None


class SamplerMirrorGaussian(BaseModel):
    lower: Array
    upper: Array
    seed: Optional[int] = None


class ProbabilityBoltzmannDownhill(BaseModel):
    seed: Optional[int] = None


class TemperatureExponential(BaseModel):
    initialTemp: float
    dimension: int
    power: Optional[float] = None


class ReannealingTrivial(BaseModel):
    pass


class Optimizer(BaseModel):
    pass


class VolatilityTermStructure(BaseModel):
    pass


class BlackVolTermStructure(BaseModel):
    pass


class BlackVolTermStructureHandle(BaseModel):
    value: Optional[BLACKVOLTERMSTRUCTURE] = None


class LocalVolTermStructure(BaseModel):
    pass


class LocalVolTermStructureHandle(BaseModel):
    value: Optional[LOCALVOLTERMSTRUCTURE] = None


class OptionletVolatilityStructure(BaseModel):
    pass


class OptionletVolatilityStructureHandle(BaseModel):
    value: Optional[OPTIONLETVOLATILITYSTRUCTURE] = None


class SwaptionVolatilityStructure(BaseModel):
    pass


class SwaptionVolatilityStructureHandle(BaseModel):
    value: Optional[SWAPTIONVOLATILITYSTRUCTURE] = None


class BlackConstantVol(BaseModel):
    referenceDate: Date
    c: CALENDAR
    volatility: float
    dayCounter: DAYCOUNTER


class BlackVarianceCurve(BaseModel):
    referenceDate: Date
    dates: List[Date]
    volatilities: List[float]
    dayCounter: DAYCOUNTER
    forceMonotoneVariance: Optional[bool] = None


class BlackVarianceSurface(BaseModel):
    pass


class LocalConstantVol(BaseModel):
    referenceDate: Date
    volatility: float
    dayCounter: DAYCOUNTER


class LocalVolSurface(BaseModel):
    blackTS: BlackVolTermStructureHandle
    riskFreeTS: YieldTermStructureHandle
    dividendTS: YieldTermStructureHandle
    underlying: QuoteHandle


class SwaptionVolatilityDiscrete(BaseModel):
    pass


class SwaptionVolCube1(BaseModel):
    atmVolStructure: SwaptionVolatilityStructureHandle
    optionTenors: List[Period]
    swapTenors: List[Period]
    strikeSpreads: List[float]
    volSpreads: List[List[QuoteHandle]]
    swapIndex: SWAPINDEX
    shortSwapIndex: SWAPINDEX
    vegaWeightedSmileFit: bool
    parametersGuess: List[List[QuoteHandle]]
    isParameterFixed: List[bool]
    isAtmCalibrated: bool
    endCriteria: Optional[EndCriteria] = None
    maxErrorTolerance: Optional[float] = None
    optMethod: Optional[OPTIMIZATIONMETHOD] = None
    errorAccept: Optional[float] = None
    useMaxError: Optional[bool] = None
    maxGuesses: Optional[int] = None
    backwardFlat: Optional[bool] = None
    cutoffStrike: Optional[float] = None


class SwaptionVolCube2(BaseModel):
    atmVolStructure: SwaptionVolatilityStructureHandle
    optionTenors: List[Period]
    swapTenors: List[Period]
    strikeSpreads: List[float]
    volSpreads: List[List[QuoteHandle]]
    swapIndex: SWAPINDEX
    shortSwapIndex: SWAPINDEX
    vegaWeightedSmileFit: bool


class SmileSection(BaseModel):
    pass


class SabrSmileSection(BaseModel):
    timeToExpiry: float
    forward: float
    sabrParameters: List[float]
    shift: Optional[float] = None


class KahaleSmileSection(BaseModel):
    source: SMILESECTION
    atm: Optional[float] = None
    interpolate: Optional[bool] = None
    exponentialExtrapolation: Optional[bool] = None
    deleteArbitragePoints: Optional[bool] = None
    moneynessGrid: Optional[List[float]] = None
    gap: Optional[float] = None
    forcedLeftIndex: Optional[int] = None
    forcedRightIndex: Optional[int] = None


class ZabrShortMaturityLognormal(BaseModel):
    pass


class ZabrShortMaturityNormal(BaseModel):
    pass


class ZabrLocalVolatility(BaseModel):
    pass


class ZabrFullFd(BaseModel):
    pass


class NoArbSabrSmileSection(BaseModel):
    d: Date
    forward: float
    sabrParameters: List[float]
    dc: Optional[DAYCOUNTER] = None
    shift: Optional[float] = None


class NoArbSabrInterpolatedSmileSection(BaseModel):
    optionDate: Date
    forward: float
    strikes: List[float]
    hasFloatingStrikes: bool
    atmVolatility: float
    vols: List[float]
    alpha: float
    beta: float
    nu: float
    rho: float
    isAlphaFixed: Optional[bool] = None
    isBetaFixed: Optional[bool] = None
    isNuFixed: Optional[bool] = None
    isRhoFixed: Optional[bool] = None
    vegaWeighted: Optional[bool] = None
    endCriteria: Optional[EndCriteria] = None
    method: Optional[OPTIMIZATIONMETHOD] = None
    dc: Optional[DAYCOUNTER] = None


class StochasticProcess(BaseModel):
    pass


class StochasticProcess1D(BaseModel):
    pass


class GeneralizedBlackScholesProcess(BaseModel):
    s0: QuoteHandle
    dividendTS: YieldTermStructureHandle
    riskFreeTS: YieldTermStructureHandle
    volTS: BlackVolTermStructureHandle


class BlackScholesProcess(BaseModel):
    s0: QuoteHandle
    riskFreeTS: YieldTermStructureHandle
    volTS: BlackVolTermStructureHandle


class BlackScholesMertonProcess(BaseModel):
    s0: QuoteHandle
    dividendTS: YieldTermStructureHandle
    riskFreeTS: YieldTermStructureHandle
    volTS: BlackVolTermStructureHandle


class BlackProcess(BaseModel):
    s0: QuoteHandle
    riskFreeTS: YieldTermStructureHandle
    volTS: BlackVolTermStructureHandle


class GarmanKohlagenProcess(BaseModel):
    s0: QuoteHandle
    foreignRiskFreeTS: YieldTermStructureHandle
    domesticRiskFreeTS: YieldTermStructureHandle
    volTS: BlackVolTermStructureHandle


class Merton76Process(BaseModel):
    stateVariable: QuoteHandle
    dividendTS: YieldTermStructureHandle
    riskFreeTS: YieldTermStructureHandle
    volTS: BlackVolTermStructureHandle
    jumpIntensity: QuoteHandle
    meanLogJump: QuoteHandle
    jumpVolatility: QuoteHandle


class StochasticProcessArray(BaseModel):
    array: List[STOCHASTICPROCESS1D]
    correlation: Matrix


class GeometricBrownianMotionProcess(BaseModel):
    initialValue: float
    mu: float
    sigma: float


class VarianceGammaProcess(BaseModel):
    s0: QuoteHandle
    dividendYield: YieldTermStructureHandle
    riskFreeRate: YieldTermStructureHandle
    sigma: float
    nu: float
    theta: float


class HestonProcess(BaseModel):
    riskFreeTS: YieldTermStructureHandle
    dividendTS: YieldTermStructureHandle
    s0: QuoteHandle
    v0: float
    kappa: float
    theta: float
    sigma: float
    rho: float


class BatesProcess(BaseModel):
    riskFreeRate: YieldTermStructureHandle
    dividendYield: YieldTermStructureHandle
    s0: QuoteHandle
    v0: float
    kappa: float
    theta: float
    sigma: float
    rho: float
    lambda_: float = Field(..., alias="lambda")
    nu: float
    delta: float


class HullWhiteProcess(BaseModel):
    riskFreeTS: YieldTermStructureHandle
    a: float
    sigma: float


class HullWhiteForwardProcess(BaseModel):
    riskFreeTS: YieldTermStructureHandle
    a: float
    sigma: float


class G2Process(BaseModel):
    a: float
    sigma: float
    b: float
    eta: float
    rho: float


class G2ForwardProcess(BaseModel):
    a: float
    sigma: float
    b: float
    eta: float
    rho: float


class GsrProcess(BaseModel):
    times: Array
    vols: Array
    reversions: Array
    T: Optional[float] = None


class OrnsteinUhlenbeckProcess(BaseModel):
    speed: float
    vol: float
    x0: Optional[float] = None
    level: Optional[float] = None


class PricingEngine(BaseModel):
    pass


class Instrument(BaseModel):
    pass


class Stock(BaseModel):
    quote: QuoteHandle


class CompositeInstrument(BaseModel):
    pass


class DateGeneration(BaseModel):
    pass


class Schedule(BaseModel):
    effectiveDate: Optional[Date] = None
    terminationDate: Optional[Date] = None
    tenor: Optional[Period] = None
    calendar: Optional[CALENDAR] = None
    convention: Optional[BusinessDayConvention] = None
    terminationDateConvention: Optional[BusinessDayConvention] = None
    rule: Optional[DateGenerationRule] = None
    endOfMonth: Optional[bool] = None
    firstDate: Optional[Date] = None
    nextToLastDate: Optional[Date] = None


class MakeSchedule(BaseModel):
    pass


class CashFlow(BaseModel):
    pass


class SimpleCashFlow(BaseModel):
    amount: float
    date: Date


class Redemption(BaseModel):
    amount: float
    date: Date


class AmortizingPayment(BaseModel):
    amount: float
    date: Date


class Coupon(BaseModel):
    pass


class FixedRateCoupon(BaseModel):
    paymentDate: Date
    nominal: float
    rate: float
    dayCounter: DAYCOUNTER
    startDate: Date
    endDate: Date
    refPeriodStart: Optional[Date] = None
    refPeriodEnd: Optional[Date] = None
    exCouponDate: Optional[Date] = None


class FloatingRateCouponPricer(BaseModel):
    pass


class FloatingRateCoupon(BaseModel):
    pass


class OvernightIndexedCoupon(BaseModel):
    paymentDate: Date
    nominal: float
    startDate: Date
    endDate: Date
    overnightIndex: OVERNIGHTINDEX
    gearing: Optional[float] = None
    spread: Optional[float] = None
    refPeriodStart: Optional[Date] = None
    refPeriodEnd: Optional[Date] = None
    dayCounter: Optional[DAYCOUNTER] = None
    telescopicValueDates: Optional[bool] = None


class CappedFlooredCoupon(BaseModel):
    underlying: FLOATINGRATECOUPON
    cap: Optional[float] = None
    floor: Optional[float] = None


class IborCoupon(BaseModel):
    paymentDate: Date
    nominal: float
    startDate: Date
    endDate: Date
    fixingDays: int
    index: IBORINDEX
    gearing: Optional[float] = None
    spread: Optional[float] = None
    refPeriodStart: Optional[Date] = None
    refPeriodEnd: Optional[Date] = None
    dayCounter: Optional[DAYCOUNTER] = None
    isInArrears: Optional[bool] = None
    exCouponDate: Optional[Date] = None


class CappedFlooredIborCoupon(BaseModel):
    paymentDate: Date
    nominal: float
    startDate: Date
    endDate: Date
    fixingDays: int
    index: IBORINDEX
    gearing: Optional[float] = None
    spread: Optional[float] = None
    cap: Optional[float] = None
    floor: Optional[float] = None
    refPeriodStart: Optional[Date] = None
    refPeriodEnd: Optional[Date] = None
    dayCounter: Optional[DAYCOUNTER] = None
    isInArrears: Optional[bool] = None
    exCouponDate: Optional[Date] = None


class IborCouponPricer(BaseModel):
    pass


class BlackIborCouponPricer(BaseModel):
    v: Optional[OptionletVolatilityStructureHandle] = None


class CmsCoupon(BaseModel):
    paymentDate: Date
    nominal: float
    startDate: Date
    endDate: Date
    fixingDays: int
    index: SWAPINDEX
    gearing: Optional[float] = None
    spread: Optional[float] = None
    refPeriodStart: Optional[Date] = None
    refPeriodEnd: Optional[Date] = None
    dayCounter: Optional[DAYCOUNTER] = None
    isInArrears: Optional[bool] = None
    exCouponDate: Optional[Date] = None


class CmsSpreadCoupon(BaseModel):
    paymentDate: Date
    nominal: float
    startDate: Date
    endDate: Date
    fixingDays: float
    index: SwapSpreadIndex
    gearing: Optional[float] = None
    spread: Optional[float] = None
    refPeriodStart: Optional[Date] = None
    refPeriodEnd: Optional[Date] = None
    dayCounter: Optional[DAYCOUNTER] = None
    isInArrears: Optional[bool] = None
    exCouponDate: Optional[Date] = None


class CmsCouponPricer(BaseModel):
    pass


class GFunctionFactory(BaseModel):
    pass


class CappedFlooredCmsCoupon(BaseModel):
    paymentDate: Date
    nominal: float
    startDate: Date
    endDate: Date
    fixingDays: float
    index: SWAPINDEX
    gearing: Optional[float] = None
    spread: Optional[float] = None
    cap: Optional[float] = None
    floor: Optional[float] = None
    refPeriodStart: Optional[Date] = None
    refPeriodEnd: Optional[Date] = None
    dayCounter: Optional[DAYCOUNTER] = None
    isInArrears: Optional[bool] = None
    exCouponDate: Optional[Date] = None


class CappedFlooredCmsSpreadCoupon(BaseModel):
    paymentDate: Date
    nominal: float
    startDate: Date
    endDate: Date
    fixingDays: float
    index: SwapSpreadIndex
    gearing: Optional[float] = None
    spread: Optional[float] = None
    cap: Optional[float] = None
    floor: Optional[float] = None
    refPeriodStart: Optional[Date] = None
    refPeriodEnd: Optional[Date] = None
    dayCounter: Optional[DAYCOUNTER] = None
    isInArrears: Optional[bool] = None
    exCouponDate: Optional[Date] = None


class LinearTsrPricerSettings(BaseModel):
    pass


class CmsSpreadCouponPricer(BaseModel):
    pass


class Duration(BaseModel):
    pass


class CashFlows(BaseModel):
    value: Optional[CashFlows] = None


class CalibrationHelper(BaseModel):
    pass


class BlackCalibrationHelper(BaseModel):
    pass


class CalibratedModel(BaseModel):
    pass


class TermStructureConsistentModel(BaseModel):
    pass


class CalibratedModelHandle(BaseModel):
    value: Optional[CALIBRATEDMODEL] = None


class TimeGrid(BaseModel):
    end: Optional[float] = None
    steps: Optional[int] = None


class Parameter(BaseModel):
    pass


class ConstantParameter(BaseModel):
    constraint: CONSTRAINT


class NullParameter(BaseModel):
    pass


class PiecewiseConstantParameter(BaseModel):
    times: List[float]
    constraint: Optional[CONSTRAINT] = None


class Payoff(BaseModel):
    pass


class Option(BaseModel):
    pass


class Barrier(BaseModel):
    pass


class DoubleBarrier(BaseModel):
    pass


class TypePayoff(BaseModel):
    pass


class StrikedTypePayoff(BaseModel):
    pass


class OneAssetOption(BaseModel):
    pass


class MultiAssetOption(BaseModel):
    pass


class AnalyticEuropeanEngine(BaseModel):
    value: GENERALIZEDBLACKSCHOLESPROCESS


class HestonModel(BaseModel):
    process: HESTONPROCESS


class HestonModelHandle(BaseModel):
    value: Optional[HESTONMODEL] = None


class PiecewiseTimeDependentHestonModel(BaseModel):
    riskFreeRate: YieldTermStructureHandle
    dividendYield: YieldTermStructureHandle
    s0: QuoteHandle
    v0: float
    theta: PARAMETER
    kappa: PARAMETER
    sigma: PARAMETER
    rho: PARAMETER
    timeGrid: TimeGrid


class COSHestonEngine(BaseModel):
    model: HESTONMODEL
    L: Optional[float] = None
    N: Optional[int] = None


class BatesModel(BaseModel):
    process: BatesProcess


class BatesEngine(BaseModel):
    model: BatesModel
    integrationOrder: Optional[int] = None


class IntegralEngine(BaseModel):
    value: GENERALIZEDBLACKSCHOLESPROCESS


class FDBermudanEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    timeSteps: Optional[int] = None
    gridPoints: Optional[int] = None
    timeDependent: Optional[bool] = None


class FDEuropeanEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    timeSteps: Optional[int] = None
    gridPoints: Optional[int] = None
    timeDependent: Optional[bool] = None


class BinomialCRRVanillaEngine(BaseModel):
    value: GENERALIZEDBLACKSCHOLESPROCESS
    steps: int


class BinomialJRVanillaEngine(BaseModel):
    value: GENERALIZEDBLACKSCHOLESPROCESS
    steps: int


class BinomialTrigeorgisVanillaEngine(BaseModel):
    value: GENERALIZEDBLACKSCHOLESPROCESS
    steps: int


class BinomialTianVanillaEngine(BaseModel):
    value: GENERALIZEDBLACKSCHOLESPROCESS
    steps: int


class BinomialJoshi4VanillaEngine(BaseModel):
    value: GENERALIZEDBLACKSCHOLESPROCESS
    steps: int


class LsmBasisSystem(BaseModel):
    pass


class FDAmericanEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    timeSteps: Optional[int] = None
    gridPoints: Optional[int] = None
    timeDependent: Optional[bool] = None


class FDShoutEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    timeSteps: Optional[int] = None
    gridPoints: Optional[int] = None
    timeDependent: Optional[bool] = None


class ContinuousArithmeticAsianLevyEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    runningAverage: QuoteHandle
    startDate: Date


class FdBlackScholesAsianEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    tGrid: int
    xGrid: int
    aGrid: int


class BaroneAdesiWhaleyApproximationEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class BjerksundStenslandApproximationEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class JuQuadraticApproximationEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class AnalyticDigitalAmericanEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class AnalyticDigitalAmericanKOEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class AnalyticDividendEuropeanEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class AnalyticBarrierEngine(BaseModel):
    value: GENERALIZEDBLACKSCHOLESPROCESS


class FdmQuantoHelper(BaseModel):
    rTS: YIELDTERMSTRUCTURE
    fTS: YIELDTERMSTRUCTURE
    fxVolTS: BLACKVOLTERMSTRUCTURE
    equityFxCorrelation: float
    exchRateATMlevel: float


class AnalyticCEVEngine(BaseModel):
    f0: float
    alpha: float
    beta: float
    rTS: YieldTermStructureHandle


class AnalyticBinaryBarrierEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class ForwardEuropeanEngine(BaseModel):
    value: GENERALIZEDBLACKSCHOLESPROCESS


class QuantoEuropeanEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    foreignRiskFreeRate: YieldTermStructureHandle
    exchangeRateVolatility: BlackVolTermStructureHandle
    correlation: QuoteHandle


class QuantoForwardEuropeanEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    foreignRiskFreeRate: YieldTermStructureHandle
    exchangeRateVolatility: BlackVolTermStructureHandle
    correlation: QuoteHandle


class BlackCalculator(BaseModel):
    payoff: STRIKEDTYPEPAYOFF
    forward: float
    stdDev: float
    discount: Optional[float] = None


class Average(BaseModel):
    pass


class AnalyticContinuousGeometricAveragePriceAsianEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class AnalyticDiscreteGeometricAveragePriceAsianEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class AnalyticDiscreteGeometricAverageStrikeAsianEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class VarianceGammaEngine(BaseModel):
    process: VarianceGammaProcess


class FFTVarianceGammaEngine(BaseModel):
    process: VarianceGammaProcess
    logStrikeSpacing: Optional[float] = None


class AnalyticDoubleBarrierEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    series: Optional[int] = None


class WulinYongDoubleBarrierEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    series: Optional[int] = None


class AnalyticDoubleBarrierBinaryEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class VanillaSwingOption(BaseModel):
    payoff: PAYOFF
    ex: SwingExercise
    minExerciseRights: int
    maxExerciseRights: int


class FdSimpleExtOUJumpSwingEngine(BaseModel):
    pass


class PlainVanillaPayoff(BaseModel):
    type: OptionType
    strike: float


class PercentageStrikePayoff(BaseModel):
    type: OptionType
    moneyness: float


class CashOrNothingPayoff(BaseModel):
    type: OptionType
    strike: float
    payoff: float


class AssetOrNothingPayoff(BaseModel):
    type: OptionType
    strike: float


class SuperSharePayoff(BaseModel):
    type: OptionType
    strike: float
    increment: float


class GapPayoff(BaseModel):
    type: OptionType
    strike: float
    strikePayoff: float


class VanillaForwardPayoff(BaseModel):
    type: OptionType
    strike: float


class BasketPayoff(BaseModel):
    pass


class MinBasketPayoff(BaseModel):
    p: PAYOFF


class MaxBasketPayoff(BaseModel):
    p: PAYOFF


class AverageBasketPayoff(BaseModel):
    p: PAYOFF
    a: Array


class SpreadBasketPayoff(BaseModel):
    p: PAYOFF


class StulzEngine(BaseModel):
    process1: GENERALIZEDBLACKSCHOLESPROCESS
    process2: GENERALIZEDBLACKSCHOLESPROCESS
    correlation: float


class KirkEngine(BaseModel):
    process1: BlackProcess
    process2: BlackProcess
    correlation: float


class HimalayaOption(BaseModel):
    fixingDates: List[Date]
    strike: float


class CallabilityPrice(BaseModel):
    amount: float
    type: CallabilityPriceType


class Callability(BaseModel):
    price: CallabilityPrice
    type: CallabilityType
    date: Date


class SoftCallability(BaseModel):
    price: CallabilityPrice
    date: Date
    trigger: float


class TimeBasket(BaseModel):
    arg_0: Optional[List[Date]] = None
    arg_1: Optional[List[float]] = None


class Swap(BaseModel):
    firstLeg: List[CASHFLOW]
    secondLeg: List[CASHFLOW]


class VanillaSwap(BaseModel):
    type: VanillaSwapType
    nominal: float
    fixedSchedule: Schedule
    fixedRate: float
    fixedDayCount: DAYCOUNTER
    floatSchedule: Schedule
    index: IBORINDEX
    spread: float
    floatingDayCount: DAYCOUNTER


class MakeVanillaSwap(BaseModel):
    swapTenor: Period
    index: IBORINDEX
    fixedRate: float
    forwardStart: Period


class NonstandardSwap(BaseModel):
    type: VanillaSwapType
    fixedNominal: List[float]
    floatingNominal: List[float]
    fixedSchedule: Schedule
    fixedRate: List[float]
    fixedDayCount: DAYCOUNTER
    floatSchedule: Schedule
    index: IBORINDEX
    gearing: List[float]
    spread: List[float]
    floatDayCount: DAYCOUNTER
    intermediateCapitalExchange: Optional[bool] = None
    finalCapitalExchange: Optional[bool] = None
    paymentConvention: Optional[BusinessDayConvention] = None


class DiscountingSwapEngine(BaseModel):
    discountCurve: YieldTermStructureHandle
    includeSettlementDateFlows: bool
    settlementDate: Optional[Date] = None
    npvDate: Optional[Date] = None


class FloatFloatSwap(BaseModel):
    type: VanillaSwapType
    nominal1: List[float]
    nominal2: List[float]
    schedule1: Schedule
    index1: INTERESTRATEINDEX
    dayCount1: DAYCOUNTER
    schedule2: Schedule
    index2: INTERESTRATEINDEX
    dayCount2: DAYCOUNTER
    intermediateCapitalExchange: Optional[bool] = None
    finalCapitalExchange: Optional[bool] = None
    gearing1: Optional[List[float]] = None
    spread1: Optional[List[float]] = None
    cappedRate1: Optional[List[float]] = None
    flooredRate1: Optional[List[float]] = None
    gearing2: Optional[List[float]] = None
    spread2: Optional[List[float]] = None
    cappedRate2: Optional[List[float]] = None
    flooredRate2: Optional[List[float]] = None
    paymentConvention1: Optional[BusinessDayConvention] = None
    paymentConvention2: Optional[BusinessDayConvention] = None


class MakeOIS(BaseModel):
    swapTenor: Period
    overnightIndex: OVERNIGHTINDEX
    fixedRate: Optional[float] = None
    fwdStart: Optional[Period] = None


class OvernightIndexedSwapIndex(BaseModel):
    familyName: str
    tenor: Period
    settlementDays: float
    currency: CURRENCY
    overnightIndex: OVERNIGHTINDEX
    telescopicValueDates: Optional[bool] = None


class Seasonality(BaseModel):
    pass


class MultiplicativePriceSeasonality(BaseModel):
    seasonalityBaseDate: Date
    frequency: float
    seasonalityFactors: List[float]


class InflationTermStructure(BaseModel):
    pass


class YoYInflationTermStructure(BaseModel):
    pass


class YoYInflationTermStructureHandle(BaseModel):
    value: Optional[YoYInflationTermStructure] = None


class ZeroInflationTermStructure(BaseModel):
    pass


class ZeroInflationTermStructureHandle(BaseModel):
    value: Optional[ZeroInflationTermStructure] = None


class Region(BaseModel):
    pass


class CustomRegion(BaseModel):
    name: str
    code: str


class InflationIndex(BaseModel):
    pass


class ZeroInflationIndex(BaseModel):
    familyName: str
    region: REGION
    revised: bool
    interpolated: bool
    frequency: float
    availabilityLag: Period
    currency: CURRENCY
    h: Optional[ZeroInflationTermStructureHandle] = None


class YoYInflationIndex(BaseModel):
    pass


class EUHICP(BaseModel):
    interpolated: bool
    h: Optional[ZeroInflationTermStructureHandle] = None


class EUHICPXT(BaseModel):
    interpolated: bool
    h: Optional[ZeroInflationTermStructureHandle] = None


class FRHICP(BaseModel):
    interpolated: bool
    h: Optional[ZeroInflationTermStructureHandle] = None


class UKRPI(BaseModel):
    interpolated: bool
    h: Optional[ZeroInflationTermStructureHandle] = None


class USCPI(BaseModel):
    interpolated: bool
    h: Optional[ZeroInflationTermStructureHandle] = None


class ZACPI(BaseModel):
    interpolated: bool
    h: Optional[ZeroInflationTermStructureHandle] = None


class YYEUHICP(BaseModel):
    interpolated: bool
    h: Optional[YoYInflationTermStructureHandle] = None


class YYEUHICPXT(BaseModel):
    interpolated: bool
    h: Optional[YoYInflationTermStructureHandle] = None


class YYFRHICP(BaseModel):
    interpolated: bool
    h: Optional[YoYInflationTermStructureHandle] = None


class YYUKRPI(BaseModel):
    interpolated: bool
    h: Optional[YoYInflationTermStructureHandle] = None


class YYUSCPI(BaseModel):
    interpolated: bool
    h: Optional[YoYInflationTermStructureHandle] = None


class YYZACPI(BaseModel):
    interpolated: bool
    h: Optional[YoYInflationTermStructureHandle] = None


class CPI(BaseModel):
    pass


class InflationCoupon(BaseModel):
    pass


class CPICoupon(BaseModel):
    pass


class ZeroCouponInflationSwapHelper(BaseModel):
    pass


class YearOnYearInflationSwapHelper(BaseModel):
    pass


class YoYInflationCapFloor(BaseModel):
    pass


class YoYInflationCap(BaseModel):
    leg: List[CASHFLOW]
    capRates: List[float]


class YoYInflationFloor(BaseModel):
    leg: List[CASHFLOW]
    floorRates: List[float]


class YoYInflationCollar(BaseModel):
    leg: List[CASHFLOW]
    capRates: List[float]
    floorRates: List[float]


class ShortRateModel(BaseModel):
    pass


class ShortRateModelHandle(BaseModel):
    value: Optional[SHORTRATEMODEL] = None


class OneFactorAffineModel(BaseModel):
    pass


class Vasicek(BaseModel):
    r0: Optional[float] = None
    a: Optional[float] = None
    b: Optional[float] = None
    sigma: Optional[float] = None
    lambda_: Optional[float] = Field(None, alias="lambda")


class HullWhite(BaseModel):
    termStructure: YieldTermStructureHandle
    a: Optional[float] = None
    sigma: Optional[float] = None


class BlackKarasinski(BaseModel):
    termStructure: YieldTermStructureHandle
    a: Optional[float] = None
    sigma: Optional[float] = None


class G2(BaseModel):
    termStructure: YieldTermStructureHandle
    a: Optional[float] = None
    sigma: Optional[float] = None
    b: Optional[float] = None
    eta: Optional[float] = None
    rho: Optional[float] = None


class JamshidianSwaptionEngine(BaseModel):
    model: ONEFACTORAFFINEMODEL
    termStructure: Optional[YieldTermStructureHandle] = None


class TreeSwaptionEngine(BaseModel):
    model: ShortRateModelHandle
    timeSteps: int
    termStructure: Optional[YieldTermStructureHandle] = None


class AnalyticCapFloorEngine(BaseModel):
    model: ONEFACTORAFFINEMODEL
    termStructure: Optional[YieldTermStructureHandle] = None


class TreeCapFloorEngine(BaseModel):
    model: SHORTRATEMODEL
    grid: TimeGrid
    termStructure: Optional[YieldTermStructureHandle] = None


class G2SwaptionEngine(BaseModel):
    model: G2
    range: float
    intervals: int


class ZeroCouponBond(BaseModel):
    settlementDays: float
    calendar: CALENDAR
    faceAmount: float
    maturityDate: Date
    paymentConvention: Optional[BusinessDayConvention] = None
    redemption: Optional[float] = None
    issueDate: Optional[Date] = None


class FixedRateBond(BaseModel):
    settlementDays: int
    couponCalendar: CALENDAR
    faceAmount: float
    startDate: Date
    maturityDate: Date
    tenor: Period
    coupons: List[float]
    accrualDayCounter: DAYCOUNTER
    accrualConvention: Optional[BusinessDayConvention] = None
    paymentConvention: Optional[BusinessDayConvention] = None
    redemption: Optional[float] = None
    issueDate: Optional[Date] = None
    stubDate: Optional[Date] = None
    rule: Optional[DateGenerationRule] = None
    endOfMonth: Optional[bool] = None
    paymentCalendar: Optional[CALENDAR] = None
    exCouponPeriod: Optional[Period] = None
    exCouponCalendar: Optional[CALENDAR] = None
    exCouponConvention: Optional[BusinessDayConvention] = None
    exCouponEndOfMonth: Optional[bool] = None


class AmortizingFixedRateBond(BaseModel):
    settlementDays: int
    paymentCalendar: CALENDAR
    faceAmount: float
    startDate: Date
    bondTenor: Period
    sinkingFrequency: float
    coupon: float
    accrualDayCounter: DAYCOUNTER
    paymentConvention: Optional[BusinessDayConvention] = None
    issueDate: Optional[Date] = None


class AmortizingFloatingRateBond(BaseModel):
    settlementDays: int
    notional: List[float]
    schedule: Schedule
    index: IBORINDEX
    accrualDayCounter: DAYCOUNTER
    paymentConvention: Optional[BusinessDayConvention] = None
    fixingDays: Optional[int] = None
    gearings: Optional[List[float]] = None
    spreads: Optional[List[float]] = None
    caps: Optional[List[float]] = None
    floors: Optional[List[float]] = None
    inArrears: Optional[bool] = None
    issueDate: Optional[Date] = None


class FloatingRateBond(BaseModel):
    settlementDays: int
    faceAmount: float
    schedule: Schedule
    index: IBORINDEX
    paymentDayCounter: DAYCOUNTER
    paymentConvention: Optional[BusinessDayConvention] = None
    fixingDays: Optional[int] = None
    gearings: Optional[List[float]] = None
    spreads: Optional[List[float]] = None
    caps: Optional[List[float]] = None
    floors: Optional[List[float]] = None
    inArrears: Optional[bool] = None
    redemption: Optional[float] = None
    issueDate: Optional[Date] = None
    exCouponPeriod: Optional[Period] = None
    exCouponCalendar: Optional[CALENDAR] = None
    exCouponConvention: Optional[BusinessDayConvention] = None
    exCouponEndOfMonth: Optional[bool] = None


class CmsRateBond(BaseModel):
    settlementDays: int
    faceAmount: float
    schedule: Schedule
    index: SWAPINDEX
    paymentDayCounter: DAYCOUNTER
    paymentConvention: BusinessDayConvention
    fixingDays: float
    gearings: List[float]
    spreads: List[float]
    caps: List[float]
    floors: List[float]
    inArrears: Optional[bool] = None
    redemption: Optional[float] = None
    issueDate: Optional[Date] = None


class DiscountingBondEngine(BaseModel):
    discountCurve: YieldTermStructureHandle


class CallableBond(BaseModel):
    pass


class CallableFixedRateBond(BaseModel):
    settlementDays: int
    faceAmount: float
    schedule: Schedule
    coupons: List[float]
    accrualDayCounter: DAYCOUNTER
    paymentConvention: BusinessDayConvention
    redemption: float
    issueDate: Date
    putCallSchedule: List[CALLABILITY]


class TreeCallableFixedRateBondEngine(BaseModel):
    model: SHORTRATEMODEL
    grid: TimeGrid
    termStructure: Optional[YieldTermStructureHandle] = None


class BlackCallableFixedRateBondEngine(BaseModel):
    fwdYieldVol: QuoteHandle
    discountCurve: YieldTermStructureHandle


class BondFunctions(BaseModel):
    pass


class CapFloor(BaseModel):
    pass


class Cap(BaseModel):
    leg: List[CASHFLOW]
    capRates: List[float]


class Floor(BaseModel):
    leg: List[CASHFLOW]
    floorRates: List[float]


class Collar(BaseModel):
    leg: List[CASHFLOW]
    capRates: List[float]
    floorRates: List[float]


class BlackCapFloorEngine(BaseModel):
    termStructure: YieldTermStructureHandle
    vol: QuoteHandle


class BachelierCapFloorEngine(BaseModel):
    termStructure: YieldTermStructureHandle
    vol: QuoteHandle


class Dividend(BaseModel):
    pass


class FixedDividend(BaseModel):
    amount: float
    date: Date


class FractionalDividend(BaseModel):
    rate: float
    date: Date


class Futures(BaseModel):
    pass


class OvernightIndexFuture(BaseModel):
    pass


class Pillar(BaseModel):
    pass


class RateHelper(BaseModel):
    pass


class DepositRateHelper(BaseModel):
    rate: QuoteHandle
    tenor: Period
    fixingDays: float
    calendar: CALENDAR
    convention: BusinessDayConvention
    endOfMonth: bool
    dayCounter: DAYCOUNTER


class FixedRateBondHelper(BaseModel):
    cleanPrice: QuoteHandle
    settlementDays: int
    faceAmount: float
    schedule: Schedule
    coupons: List[float]
    paymentDayCounter: DAYCOUNTER
    paymentConvention: Optional[BusinessDayConvention] = None
    redemption: Optional[float] = None
    issueDate: Optional[Date] = None
    paymentCalendar: Optional[CALENDAR] = None
    exCouponPeriod: Optional[Period] = None
    exCouponCalendar: Optional[CALENDAR] = None
    exCouponConvention: Optional[BusinessDayConvention] = None
    exCouponEndOfMonth: Optional[bool] = None
    useCleanPrice: Optional[bool] = None


class DatedOISRateHelper(BaseModel):
    startDate: Date
    endDate: Date
    rate: QuoteHandle
    index: OVERNIGHTINDEX
    discountingCurve: Optional[YieldTermStructureHandle] = None


class FxSwapRateHelper(BaseModel):
    fwdPoint: QuoteHandle
    spotFx: QuoteHandle
    tenor: Period
    fixingDays: float
    calendar: CALENDAR
    convention: BusinessDayConvention
    endOfMonth: bool
    isFxBaseCurrencyCollateralCurrency: bool
    collateralCurve: YieldTermStructureHandle
    tradingCalendar: Optional[CALENDAR] = None


class Discount(BaseModel):
    pass


class ZeroYield(BaseModel):
    pass


class ForwardRate(BaseModel):
    pass


class IterativeBootstrap(BaseModel):
    accuracy: Optional[Optional[float]] = None
    minValue: Optional[Optional[float]] = None
    maxValue: Optional[Optional[float]] = None


class PiecewiseFlatForward(BaseModel):
    pass


class PiecewiseLogLinearDiscount(BaseModel):
    pass


class PiecewiseLinearForward(BaseModel):
    pass


class PiecewiseLinearZero(BaseModel):
    pass


class PiecewiseCubicZero(BaseModel):
    pass


class PiecewiseLogCubicDiscount(BaseModel):
    pass


class PiecewiseSplineCubicDiscount(BaseModel):
    pass


class PiecewiseKrugerZero(BaseModel):
    pass


class PiecewiseKrugerLogDiscount(BaseModel):
    pass


class PiecewiseConvexMonotoneZero(BaseModel):
    pass


class GlobalBootstrap(BaseModel):
    additionalHelpers: List[RATEHELPER]
    additionalDates: List[Date]
    accuracy: Optional[Optional[float]] = None


class GlobalLinearSimpleZeroCurve(BaseModel):
    pass


class DefaultProbabilityTermStructure(BaseModel):
    pass


class DefaultProbabilityTermStructureHandle(BaseModel):
    value: Optional[DEFAULTPROBABILITYTERMSTRUCTURE] = None


class FlatHazardRate(BaseModel):
    settlementDays: int
    calendar: CALENDAR
    hazardRate: QuoteHandle
    dayCounter: DAYCOUNTER


class DefaultProbabilityHelper(BaseModel):
    pass


class SpreadCdsHelper(BaseModel):
    spread: float
    tenor: Period
    settlementDays: int
    calendar: CALENDAR
    frequency: float
    convention: BusinessDayConvention
    rule: DateGenerationRule
    dayCounter: DAYCOUNTER
    recoveryRate: float
    discountCurve: YieldTermStructureHandle
    settlesAccrual: Optional[bool] = None
    paysAtDefaultTime: Optional[bool] = None


class UpfrontCdsHelper(BaseModel):
    upfront: float
    spread: float
    tenor: Period
    settlementDays: int
    calendar: CALENDAR
    frequency: float
    convention: BusinessDayConvention
    rule: DateGenerationRule
    dayCounter: DAYCOUNTER
    recoveryRate: float
    discountCurve: YieldTermStructureHandle
    upfrontSettlementDays: Optional[float] = None
    settlesAccrual: Optional[bool] = None
    paysAtDefaultTime: Optional[bool] = None


class HazardRate(BaseModel):
    pass


class DefaultDensity(BaseModel):
    pass


class PiecewiseFlatHazardRate(BaseModel):
    pass


class Protection(BaseModel):
    pass


class Claim(BaseModel):
    pass


class FaceValueClaim(BaseModel):
    pass


class MidPointCdsEngine(BaseModel):
    probability: DefaultProbabilityTermStructureHandle
    recoveryRate: float
    discountCurve: YieldTermStructureHandle


class IntegralCdsEngine(BaseModel):
    integrationStep: Period
    probability: DefaultProbabilityTermStructureHandle
    recoveryRate: float
    discountCurve: YieldTermStructureHandle
    includeSettlementDateFlows: Optional[bool] = None


class BlackCdsOptionEngine(BaseModel):
    value: DefaultProbabilityTermStructureHandle
    recoveryRate: float
    termStructure: YieldTermStructureHandle
    vol: QuoteHandle


class NormalDistribution(BaseModel):
    average: Optional[float] = None
    sigma: Optional[float] = None


class CumulativeNormalDistribution(BaseModel):
    average: Optional[float] = None
    sigma: Optional[float] = None


class InverseCumulativeNormal(BaseModel):
    average: Optional[float] = None
    sigma: Optional[float] = None


class MoroInverseCumulativeNormal(BaseModel):
    average: Optional[float] = None
    sigma: Optional[float] = None


class BivariateCumulativeNormalDistribution(BaseModel):
    rho: float


class BinomialDistribution(BaseModel):
    p: float
    n: float


class CumulativeBinomialDistribution(BaseModel):
    p: float
    n: float


class BivariateCumulativeNormalDistributionDr78(BaseModel):
    rho: float


class BivariateCumulativeNormalDistributionWe04DP(BaseModel):
    rho: float


class CumulativeChiSquareDistribution(BaseModel):
    df: float


class NonCentralCumulativeChiSquareDistribution(BaseModel):
    df: float
    ncp: float


class InverseNonCentralCumulativeChiSquareDistribution(BaseModel):
    df: float
    ncp: float
    maxEvaluations: Optional[int] = None
    accuracy: Optional[float] = None


class CumulativeGammaDistribution(BaseModel):
    a: float


class GammaFunction(BaseModel):
    pass


class PoissonDistribution(BaseModel):
    mu: float


class CumulativePoissonDistribution(BaseModel):
    mu: float


class InverseCumulativePoisson(BaseModel):
    lambda_: float = Field(..., alias="lambda")


class StudentDistribution(BaseModel):
    n: int


class CumulativeStudentDistribution(BaseModel):
    n: int


class InverseCumulativeStudent(BaseModel):
    n: int
    accuracy: Optional[float] = None
    maxIterations: Optional[int] = None


class Money(BaseModel):
    currency: CURRENCY
    value: float


class ExchangeRate(BaseModel):
    source: CURRENCY
    target: CURRENCY
    rate: float


class ExchangeRateManager(BaseModel):
    pass


class Settings(BaseModel):
    pass


class Fdm1dMesher(BaseModel):
    size: int


class FdmBlackScholesMesher(BaseModel):
    size: int
    process: GENERALIZEDBLACKSCHOLESPROCESS
    maturity: float
    strike: float
    xMinConstraint: Optional[Optional[float]] = None
    xMaxConstraint: Optional[Optional[float]] = None
    eps: Optional[float] = None
    scaleFactor: Optional[float] = None
    cPoint: Optional[List[Union[float, float]]] = None
    dividendSchedule: Optional[List[DIVIDEND]] = None
    fdmQuantoHelper: Optional[FdmQuantoHelper] = None
    spotAdjustment: Optional[float] = None


class Concentrating1dMesher(BaseModel):
    start: float
    end: float
    size: int
    cPoints: List[List[Union[float, float, bool]]]
    tol: Optional[float] = None


class ExponentialJump1dMesher(BaseModel):
    steps: int
    beta: float
    jumpIntensity: float
    eta: float
    eps: Optional[float] = None


class FdmCEV1dMesher(BaseModel):
    size: int
    f0: float
    alpha: float
    beta: float
    maturity: float
    eps: Optional[float] = None
    scaleFactor: Optional[float] = None
    cPoint: Optional[List[Union[float, float]]] = None


class FdmHestonVarianceMesher(BaseModel):
    size: int
    process: HESTONPROCESS
    maturity: float
    tAvgSteps: Optional[int] = None
    epsilon: Optional[float] = None


class FdmHestonLocalVolatilityVarianceMesher(BaseModel):
    size: int
    process: HESTONPROCESS
    leverageFct: LOCALVOLTERMSTRUCTURE
    maturity: float
    tAvgSteps: Optional[int] = None
    epsilon: Optional[float] = None


class FdmSimpleProcess1dMesher(BaseModel):
    size: int
    process: STOCHASTICPROCESS1D
    maturity: float
    tAvgSteps: Optional[int] = None
    epsilon: Optional[float] = None
    mandatoryPoint: Optional[Optional[float]] = None


class Uniform1dMesher(BaseModel):
    start: float
    end: float
    size: int


class Predefined1dMesher(BaseModel):
    x: List[float]


class Glued1dMesher(BaseModel):
    leftMesher: FDM1DMESHER
    rightMesher: FDM1DMESHER


class FdmLinearOpIterator(BaseModel):
    pass


class FdmLinearOpLayout(BaseModel):
    pass


class FdmMesher(BaseModel):
    pass


class FdmMesherComposite(BaseModel):
    m1: FDM1DMESHER
    m2: FDM1DMESHER
    m3: Optional[FDM1DMESHER] = None
    m4: Optional[FDM1DMESHER] = None


class FdmLinearOp(BaseModel):
    pass


class FdmLinearOpComposite(BaseModel):
    pass


class FdmBoundaryCondition(BaseModel):
    pass


class FdmTimeDepDirichletBoundary(BaseModel):
    pass


class FdmBlackScholesOp(BaseModel):
    mesher: FDMMESHER
    process: GENERALIZEDBLACKSCHOLESPROCESS
    strike: float
    localVol: Optional[bool] = None
    illegalLocalVolOverwrite: Optional[Optional[float]] = None
    direction: Optional[int] = None
    quantoHelper: Optional[FdmQuantoHelper] = None


class Fdm2dBlackScholesOp(BaseModel):
    mesher: FDMMESHER
    p1: GENERALIZEDBLACKSCHOLESPROCESS
    p2: GENERALIZEDBLACKSCHOLESPROCESS
    correlation: float
    maturity: float
    localVol: Optional[bool] = None
    illegalLocalVolOverwrite: Optional[Optional[float]] = None


class FdmCEVOp(BaseModel):
    mesher: FDMMESHER
    rTS: YIELDTERMSTRUCTURE
    f0: float
    alpha: float
    beta: float
    direction: int


class FdmG2Op(BaseModel):
    mesher: FDMMESHER
    model: G2
    direction1: int
    direction2: int


class FdmHestonHullWhiteOp(BaseModel):
    mesher: FDMMESHER
    hestonProcess: HESTONPROCESS
    hwProcess: HullWhiteProcess
    equityShortRateCorrelation: float


class FdmHestonOp(BaseModel):
    mesher: FDMMESHER
    hestonProcess: HESTONPROCESS
    quantoHelper: Optional[FdmQuantoHelper] = None
    leverageFct: Optional[LOCALVOLTERMSTRUCTURE] = None


class FdmHullWhiteOp(BaseModel):
    mesher: FDMMESHER
    model: HullWhite
    direction: int


class FdmLocalVolFwdOp(BaseModel):
    mesher: FDMMESHER
    spot: QUOTE
    rTS: YIELDTERMSTRUCTURE
    qTS: YIELDTERMSTRUCTURE
    localVol: LOCALVOLTERMSTRUCTURE
    direction: Optional[int] = None


class FdmOrnsteinUhlenbeckOp(BaseModel):
    mesher: FDMMESHER
    p: OrnsteinUhlenbeckProcess
    rTS: YIELDTERMSTRUCTURE
    direction: Optional[int] = None


class FdmSabrOp(BaseModel):
    mesher: FDMMESHER
    rTS: YIELDTERMSTRUCTURE
    f0: float
    alpha: float
    beta: float
    nu: float
    rho: float


class FdmZabrOp(BaseModel):
    mesher: FDMMESHER
    beta: float
    nu: float
    rho: float
    gamma: float


class FdmDupire1dOp(BaseModel):
    mesher: FDMMESHER
    localVolatility: Array


class FdmBlackScholesFwdOp(BaseModel):
    mesher: FDMMESHER
    process: GENERALIZEDBLACKSCHOLESPROCESS
    strike: float
    localVol: Optional[bool] = None
    illegalLocalVolOverwrite: Optional[float] = None
    direction: Optional[int] = None


class TripleBandLinearOp(BaseModel):
    direction: int
    mesher: FDMMESHER


class FirstDerivativeOp(BaseModel):
    direction: int
    mesher: FDMMESHER


class SecondDerivativeOp(BaseModel):
    direction: int
    mesher: FDMMESHER


class NinePointLinearOp(BaseModel):
    d0: int
    d1: int
    mesher: FDMMESHER


class SecondOrderMixedDerivativeOp(BaseModel):
    d0: int
    d1: int
    mesher: FDMMESHER


class NthOrderDerivativeOp(BaseModel):
    direction: int
    order: int
    nPoints: int
    mesher: FDMMESHER


class FdmInnerValueCalculator(BaseModel):
    pass


class FdmCellAveragingInnerValue(BaseModel):
    pass


class FdmLogInnerValue(BaseModel):
    payoff: PAYOFF
    mesher: FDMMESHER
    direction: int


class FdmLogBasketInnerValue(BaseModel):
    payoff: BASKETPAYOFF
    mesher: FDMMESHER


class FdmZeroInnerValue(BaseModel):
    pass


class FdmSnapshotCondition(BaseModel):
    t: float


class FdmStepConditionComposite(BaseModel):
    pass


class FdmAmericanStepCondition(BaseModel):
    mesher: FDMMESHER
    calculator: FDMINNERVALUECALCULATOR


class FdmArithmeticAverageCondition(BaseModel):
    averageTimes: List[float]
    real: float
    pastFixings: int
    mesher: FDMMESHER
    equityDirection: int


class FdmBermudanStepCondition(BaseModel):
    exerciseDates: List[Date]
    referenceDate: Date
    dayCounter: DAYCOUNTER
    mesher: FDMMESHER
    calculator: FDMINNERVALUECALCULATOR


class FdmSimpleStorageCondition(BaseModel):
    exerciseTimes: List[float]
    mesher: FDMMESHER
    calculator: FDMINNERVALUECALCULATOR
    changeRate: float


class FdmSimpleSwingCondition(BaseModel):
    exerciseTimes: List[float]
    mesher: FDMMESHER
    calculator: FDMINNERVALUECALCULATOR
    swingDirection: int
    minExercises: Optional[int] = None


class FdmDividendHandler(BaseModel):
    schedule: List[DIVIDEND]
    mesher: FDMMESHER
    referenceDate: Date
    dayCounter: DAYCOUNTER
    equityDirection: int


class FdmSolverDesc(BaseModel):
    pass


class Fdm2dBlackScholesSolver(BaseModel):
    pass


class FdmG2Solver(BaseModel):
    pass


class FdmHestonHullWhiteSolver(BaseModel):
    pass


class FdmHestonSolver(BaseModel):
    pass


class FdmHullWhiteSolver(BaseModel):
    pass


class RiskNeutralDensityCalculator(BaseModel):
    pass


class BSMRNDCalculator(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class CEVRNDCalculator(BaseModel):
    f0: float
    alpha: float
    beta: float


class GBSMRNDCalculator(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS


class HestonRNDCalculator(BaseModel):
    hestonProcess: HESTONPROCESS
    integrationEps: Optional[float] = None
    maxIntegrationIterations: Optional[int] = None


class LocalVolRNDCalculator(BaseModel):
    spot: QUOTE
    rTS: YIELDTERMSTRUCTURE
    qTS: YIELDTERMSTRUCTURE
    localVol: LOCALVOLTERMSTRUCTURE
    xGrid: Optional[int] = None
    tGrid: Optional[int] = None
    x0Density: Optional[float] = None
    localVolProbEps: Optional[float] = None
    maxIter: Optional[int] = None
    gaussianStepSize: Optional[float] = None


class SquareRootProcessRNDCalculator(BaseModel):
    v0: float
    kappa: float
    theta: float
    sigma: float


class FittingMethod(BaseModel):
    pass


class ExponentialSplinesFitting(BaseModel):
    constrainAtZero: Optional[bool] = None
    weights: Optional[Array] = None


class NelsonSiegelFitting(BaseModel):
    weights: Optional[Array] = None


class SvenssonFitting(BaseModel):
    weights: Optional[Array] = None


class CubicBSplinesFitting(BaseModel):
    knotVector: List[float]
    constrainAtZero: Optional[bool] = None
    weights: Optional[Array] = None


class SimplePolynomialFitting(BaseModel):
    degree: float
    constrainAtZero: Optional[bool] = None
    weights: Optional[Array] = None


class Forward(BaseModel):
    pass


class Position(BaseModel):
    pass


class Gaussian1dModel(BaseModel):
    pass


class Gsr(BaseModel):
    termStructure: YieldTermStructureHandle
    volstepdates: List[Date]
    volatilities: List[QuoteHandle]
    reversions: List[QuoteHandle]
    T: Optional[float] = None


class MarkovFunctionalModelSettings(BaseModel):
    yGridPoints: Optional[int] = None
    yStdDevs: Optional[float] = None
    gaussHermitePoints: Optional[int] = None
    digitalGap: Optional[float] = None
    marketRateAccuracy: Optional[float] = None
    lowerRateBound: Optional[float] = None
    upperRateBound: Optional[float] = None
    adjustments: Optional[int] = None
    smileMoneyCheckpoints: Optional[List[float]] = None


class Gaussian1dJamshidianSwaptionEngine(BaseModel):
    model: GAUSSIAN1DMODEL


class SegmentIntegral(BaseModel):
    intervals: int


class SimpsonIntegral(BaseModel):
    accuracy: float
    maxIterations: int


class GaussKronrodAdaptive(BaseModel):
    tolerance: float
    maxFunctionEvaluations: Optional[int] = None


class GaussKronrodNonAdaptive(BaseModel):
    absoluteAccuracy: float
    maxEvaluations: int
    relativeAccuracy: float


class GaussLobattoIntegral(BaseModel):
    maxIterations: int
    absAccuracy: float
    relAccuracy: Optional[float] = None
    useConvergenceEstimate: Optional[bool] = None


class GaussLaguerreIntegration(BaseModel):
    n: int
    s: Optional[float] = None


class GaussHermiteIntegration(BaseModel):
    n: int
    mu: Optional[float] = None


class GaussJacobiIntegration(BaseModel):
    n: int
    alpha: float
    beta: float


class GaussHyperbolicIntegration(BaseModel):
    n: int


class GaussLegendreIntegration(BaseModel):
    n: int


class GaussChebyshevIntegration(BaseModel):
    n: int


class GaussChebyshev2ndIntegration(BaseModel):
    n: int


class GaussGegenbauerIntegration(BaseModel):
    n: int
    lambda_: float = Field(..., alias="lambda")


class LecuyerUniformRng(BaseModel):
    seed: Optional[int] = None


class KnuthUniformRng(BaseModel):
    seed: Optional[int] = None


class MersenneTwisterUniformRng(BaseModel):
    seed: Optional[int] = None


class UniformRandomGenerator(BaseModel):
    seed: Optional[int] = None


class GaussianRandomGenerator(BaseModel):
    rng: UniformRandomGenerator


class HaltonRsg(BaseModel):
    dimensionality: int
    seed: Optional[int] = None
    randomStart: Optional[bool] = None
    randomShift: Optional[bool] = None


class SobolBrownianBridgeRsg(BaseModel):
    factors: int
    steps: int


class UniformRandomSequenceGenerator(BaseModel):
    dimensionality: int
    rng: UniformRandomGenerator


class GaussianRandomSequenceGenerator(BaseModel):
    uniformSequenceGenerator: UniformRandomSequenceGenerator


class Path(BaseModel):
    pass


class MultiPath(BaseModel):
    pass


class GaussianMultiPathGenerator(BaseModel):
    pass


class BrownianBridge(BaseModel):
    steps: int


class DefaultBoundaryCondition(BaseModel):
    pass


class TridiagonalOperator(BaseModel):
    low: Array
    mid: Array
    high: Array


class DPlus(BaseModel):
    gridPoints: int
    h: float


class DMinus(BaseModel):
    gridPoints: int
    h: float


class DZero(BaseModel):
    gridPoints: int
    h: float


class DPlusDMinus(BaseModel):
    gridPoints: int
    h: float


class SampledCurve(BaseModel):
    value: Optional[Array] = None


class HestonSLVProcess(BaseModel):
    hestonProcess: HESTONPROCESS
    leverageFct: LOCALVOLTERMSTRUCTURE


class BrownianGeneratorFactory(BaseModel):
    pass


class MTBrownianGeneratorFactory(BaseModel):
    seed: Optional[int] = None


class SobolBrownianGenerator(BaseModel):
    pass


class HestonSLVMCModel(BaseModel):
    pass


class FdmHestonGreensFct(BaseModel):
    pass


class HestonSLVFokkerPlanckFdmParams(BaseModel):
    pass


class HestonSLVFDMModel(BaseModel):
    pass


class Statistics(BaseModel):
    pass


class IncrementalStatistics(BaseModel):
    pass


class RiskStatistics(BaseModel):
    pass


class CapFloorTermVolatilityStructure(BaseModel):
    pass


class CapFloorTermVolatilityStructureHandle(BaseModel):
    value: Optional[CAPFLOORTERMVOLATILITYSTRUCTURE] = None


class CapFloorTermVolCurve(BaseModel):
    settlementDays: float
    calendar: CALENDAR
    bdc: BusinessDayConvention
    lengths: List[Period]
    vols: List[float]
    dc: Optional[DAYCOUNTER] = None


class CapFloorTermVolSurface(BaseModel):
    settlementDays: float
    calendar: CALENDAR
    bdc: BusinessDayConvention
    optionTenors: List[Period]
    strikes: List[float]
    volatilities: Matrix
    dc: Optional[DAYCOUNTER] = None


class StrippedOptionletBase(BaseModel):
    pass


class StrippedOptionletAdapter(BaseModel):
    value: STRIPPEDOPTIONLETBASE


class Settlement(BaseModel):
    pass


class BlackSwaptionEngine(BaseModel):
    discountCurve: YieldTermStructureHandle
    vol: QuoteHandle
    dc: Optional[DAYCOUNTER] = None
    displacement: Optional[float] = None


class BachelierSwaptionEngine(BaseModel):
    discountCurve: YieldTermStructureHandle
    vol: QuoteHandle
    dc: Optional[DAYCOUNTER] = None


class ConstantEstimator(BaseModel):
    size: int


class ParkinsonSigma(BaseModel):
    yearFraction: float


class GarmanKlassSigma1(BaseModel):
    yearFraction: float
    marketOpenFraction: float


class GarmanKlassSigma3(BaseModel):
    yearFraction: float
    marketOpenFraction: float


class GarmanKlassSigma4(BaseModel):
    yearFraction: float


class GarmanKlassSigma5(BaseModel):
    yearFraction: float


class GarmanKlassSigma6(BaseModel):
    yearFraction: float
    marketOpenFraction: float


class ZeroCurve(BaseModel):
    dates: List[Date]
    yields: List[float]
    dayCounter: DAYCOUNTER
    calendar: Optional[CALENDAR] = None
    i: Optional[Linear] = None
    compounding: Optional[Compounding] = None
    frequency: Optional[float] = None


class LogLinearInterpolatedZeroCurve(BaseModel):
    dates: List[Date]
    yields: List[float]
    dayCounter: DAYCOUNTER
    calendar: Optional[CALENDAR] = None
    i: Optional[LogLinear] = None
    compounding: Optional[Compounding] = None
    frequency: Optional[float] = None


class CubicInterpolatedZeroCurve(BaseModel):
    dates: List[Date]
    yields: List[float]
    dayCounter: DAYCOUNTER
    calendar: Optional[CALENDAR] = None
    i: Optional[Cubic] = None
    compounding: Optional[Compounding] = None
    frequency: Optional[float] = None


class SplineCubicInterpolatedZeroCurve(BaseModel):
    dates: List[Date]
    yields: List[float]
    dayCounter: DAYCOUNTER
    calendar: Optional[CALENDAR] = None
    i: Optional[SplineCubic] = None
    compounding: Optional[Compounding] = None
    frequency: Optional[float] = None


class DefaultLogCubicInterpolatedZeroCurve(BaseModel):
    dates: List[Date]
    yields: List[float]
    dayCounter: DAYCOUNTER
    calendar: Optional[CALENDAR] = None
    i: Optional[DefaultLogCubic] = None
    compounding: Optional[Compounding] = None
    frequency: Optional[float] = None


class MonotonicCubicInterpolatedZeroCurve(BaseModel):
    dates: List[Date]
    yields: List[float]
    dayCounter: DAYCOUNTER
    calendar: Optional[CALENDAR] = None
    i: Optional[MonotonicCubic] = None
    compounding: Optional[Compounding] = None
    frequency: Optional[float] = None


class Gaussian1dNonstandardSwaptionEngineProbabilities(BaseModel):
    __root__: Any


class CmsMarketCalibrationCalibrationType(BaseModel):
    __root__: Any


class GFunctionFactoryYieldCurveModel(BaseModel):
    __root__: Any


class AnalyticPTDHestonEngineComplexLogFormula(BaseModel):
    __root__: Any


class YearOnYearInflationSwapType(BaseModel):
    __root__: Any


class SettlementMethod(BaseModel):
    __root__: Any


class IsdaCdsEngineForwardsInCouponPeriod(BaseModel):
    __root__: Any


class GJRGARCHProcessDiscretization(BaseModel):
    __root__: Any


class GaussianQuadrature(BaseModel):
    __root__: Any


class Actual365FixedConvention(BaseModel):
    __root__: Any


class ExtendedOrnsteinUhlenbeckProcess(BaseModel):
    __root__: Any


class AnalyticHestonEngineIntegrationAlgorithm(BaseModel):
    __root__: Any


class SobolRsgDirectionIntegers(BaseModel):
    __root__: Any


class FdBlackScholesVanillaEngineCashDividendModel(BaseModel):
    __root__: Any


class FdmSchemeDescFdmSchemeType(BaseModel):
    __root__: Any


class BarrierType(BaseModel):
    __root__: Any


class FdmBoundaryConditionSet(BaseModel):
    __root__: Any


class OvernightIndexFutureNettingType(BaseModel):
    __root__: Any


class FdmDiscountDirichletBoundarySide(BaseModel):
    __root__: Any


class DefaultBoundaryConditionSide(BaseModel):
    __root__: Any


class BlackCalibrationHelperCalibrationErrorType(BaseModel):
    __root__: Any


class DeltaVolQuoteDeltaType(BaseModel):
    __root__: Any


class Thirty360Convention(BaseModel):
    __root__: Any


class FdmDirichletBoundarySide(BaseModel):
    __root__: Any


class PillarChoice(BaseModel):
    __root__: Any


class SettlementType(BaseModel):
    __root__: Any


class AverageType(BaseModel):
    __root__: Any


class PositionType(BaseModel):
    __root__: Any


class OvernightIndexedSwapType(BaseModel):
    __root__: Any


class ImplicitEulerSchemeSolverType(BaseModel):
    __root__: Any


class MirrorGaussianSimulatedAnnealingResetScheme(BaseModel):
    __root__: Any


class AndreasenHugeVolatilityInterplCalibrationType(BaseModel):
    __root__: Any


class DiscountFactor(BaseModel):
    __root__: Any


class FuturesType(BaseModel):
    __root__: Any


class IsdaCdsEngineAccrualBias(BaseModel):
    __root__: Any


class AndreasenHugeVolatilityInterplCalibrationSet(BaseModel):
    __root__: Any


class Leg(BaseModel):
    __root__: Any


class ProtectionSide(BaseModel):
    __root__: Any


class IsdaCdsEngineNumericalFix(BaseModel):
    __root__: Any


class DoubleBarrierType(BaseModel):
    __root__: Any


class AnalyticHestonEngineComplexLogFormula(BaseModel):
    __root__: Any


class GaussianSimulatedAnnealingResetScheme(BaseModel):
    __root__: Any


class JointCalendarRule(BaseModel):
    __root__: Any


class ZeroCouponInflationSwapType(BaseModel):
    __root__: Any


class Gaussian1dSwaptionEngineProbabilities(BaseModel):
    __root__: Any


class VolatilityType(BaseModel):
    __root__: Any


class Gaussian1dFloatFloatSwaptionEngineProbabilities(BaseModel):
    __root__: Any


class LogNormalSimulatedAnnealingResetScheme(BaseModel):
    __root__: Any


class CPIInterpolationType(BaseModel):
    __root__: Any


class ExerciseType(BaseModel):
    __root__: Any


class CPISwapType(BaseModel):
    __root__: Any


class AnalyticPTDHestonEngineIntegration(BaseModel):
    __root__: Any


class FdmSquareRootFwdOpTransformationType(BaseModel):
    __root__: Any


class AndreasenHugeVolatilityInterplInterpolationType(BaseModel):
    __root__: Any


class SobolBrownianGeneratorOrdering(BaseModel):
    __root__: Any


class Exercise(BaseModel):
    type: ExerciseType


class RebatedExercise(BaseModel):
    exercise: EXERCISE
    rebates: List[float]
    rebateSettlementDays: Optional[float] = None
    rebatePaymentCalendar: Optional[CALENDAR] = None
    rebatePaymentConvention: Optional[BusinessDayConvention] = None


class JointCalendar(BaseModel):
    arg_0: CALENDAR
    arg_1: CALENDAR
    arg_2: CALENDAR
    arg_3: CALENDAR
    rule: Optional[JointCalendarRule] = None


class Actual365Fixed(BaseModel):
    c: Optional[Actual365FixedConvention] = None


class Thirty360(BaseModel):
    c: Optional[Thirty360Convention] = None


class ActualActual(BaseModel):
    c: Optional[ActualActualConvention] = None
    schedule: Optional[Schedule] = None


class GaussianSimulatedAnnealing(BaseModel):
    sampler: SamplerGaussian
    probability: ProbabilityBoltzmannDownhill
    temperature: TemperatureExponential
    reannealing: Optional[ReannealingTrivial] = None
    startTemperature: Optional[float] = None
    endTemperature: Optional[float] = None
    reAnnealSteps: Optional[int] = None
    resetScheme: Optional[GaussianSimulatedAnnealingResetScheme] = None
    resetSteps: Optional[int] = None


class MirrorGaussianSimulatedAnnealing(BaseModel):
    sampler: SamplerMirrorGaussian
    probability: ProbabilityBoltzmannDownhill
    temperature: TemperatureExponential
    reannealing: Optional[ReannealingTrivial] = None
    startTemperature: Optional[float] = None
    endTemperature: Optional[float] = None
    reAnnealSteps: Optional[int] = None
    resetScheme: Optional[MirrorGaussianSimulatedAnnealingResetScheme] = None
    resetSteps: Optional[int] = None


class LogNormalSimulatedAnnealing(BaseModel):
    sampler: SamplerLogNormal
    probability: ProbabilityBoltzmannDownhill
    temperature: TemperatureExponential
    reannealing: Optional[ReannealingTrivial] = None
    startTemperature: Optional[float] = None
    endTemperature: Optional[float] = None
    reAnnealSteps: Optional[int] = None
    resetScheme: Optional[LogNormalSimulatedAnnealingResetScheme] = None
    resetSteps: Optional[int] = None


class ConstantOptionletVolatility(BaseModel):
    settlementDays: float
    cal: CALENDAR
    bdc: BusinessDayConvention
    volatility: QuoteHandle
    dayCounter: DAYCOUNTER
    type: Optional[VolatilityType] = None
    shift: Optional[float] = None


class ConstantSwaptionVolatility(BaseModel):
    referenceDate: Date
    cal: CALENDAR
    bdc: BusinessDayConvention
    volatility: float
    dc: DAYCOUNTER
    type: Optional[VolatilityType] = None
    shift: Optional[float] = None


class SwaptionVolatilityMatrix(BaseModel):
    calendar: CALENDAR
    bdc: BusinessDayConvention
    optionTenors: List[Period]
    swapTenors: List[Period]
    vols: Matrix
    dayCounter: DAYCOUNTER
    flatExtrapolation: Optional[bool] = None
    type: Optional[VolatilityType] = None
    shifts: Optional[Matrix] = None


class FlatSmileSection(BaseModel):
    exerciseTime: float
    vol: float
    dc: DAYCOUNTER
    atmLevel: Optional[float] = None
    type: Optional[VolatilityType] = None
    shift: Optional[float] = None


class AndreasenHugeVolatilityInterpl(BaseModel):
    calibrationSet: AndreasenHugeVolatilityInterplCalibrationSet
    spot: QuoteHandle
    rTS: YieldTermStructureHandle
    qTS: YieldTermStructureHandle
    interpolationType: Optional[AndreasenHugeVolatilityInterplInterpolationType] = None
    calibrationType: Optional[AndreasenHugeVolatilityInterplCalibrationType] = None
    nGridPoints: Optional[int] = None
    minStrike: Optional[float] = None
    maxStrike: Optional[float] = None
    optimizationMethod: Optional[OPTIMIZATIONMETHOD] = None
    endCriteria: Optional[EndCriteria] = None


class AndreasenHugeVolatilityAdapter(BaseModel):
    volInterpl: AndreasenHugeVolatilityInterpl
    eps: Optional[float] = None


class AndreasenHugeLocalVolAdapter(BaseModel):
    localVol: AndreasenHugeVolatilityInterpl


class CmsMarket(BaseModel):
    swapLengths: List[Period]
    swapIndexes: List[SWAPINDEX]
    iborIndex: IBORINDEX
    bidAskSpreads: List[List[QuoteHandle]]
    pricers: List[CMSCOUPONPRICER]
    discountingTS: YieldTermStructureHandle


class CmsMarketCalibration(BaseModel):
    volCube: SwaptionVolatilityStructureHandle
    cmsMarket: CmsMarket
    weights: Matrix
    calibrationType: CmsMarketCalibrationCalibrationType


class ExtOUWithJumpsProcess(BaseModel):
    process: ExtendedOrnsteinUhlenbeckProcess
    Y0: float
    beta: float
    jumpIntensity: float
    eta: float


class KlugeExtOUProcess(BaseModel):
    rho: float
    kluge: ExtOUWithJumpsProcess
    extOU: ExtendedOrnsteinUhlenbeckProcess


class GJRGARCHProcess(BaseModel):
    riskFreeRate: YieldTermStructureHandle
    dividendYield: YieldTermStructureHandle
    s0: QuoteHandle
    v0: float
    omega: float
    alpha: float
    beta: float
    gamma: float
    lambda_: float = Field(..., alias="lambda")
    daysPerYear: Optional[float] = None
    d: Optional[GJRGARCHProcessDiscretization] = None


class AnalyticHaganPricer(BaseModel):
    v: SwaptionVolatilityStructureHandle
    model: GFunctionFactoryYieldCurveModel
    meanReversion: QuoteHandle


class NumericHaganPricer(BaseModel):
    v: SwaptionVolatilityStructureHandle
    model: GFunctionFactoryYieldCurveModel
    meanReversion: QuoteHandle
    lowerLimit: Optional[float] = None
    upperLimit: Optional[float] = None
    precision: Optional[float] = None


class LinearTsrPricer(BaseModel):
    swaptionVol: SwaptionVolatilityStructureHandle
    meanReversion: QuoteHandle
    couponDiscountCurve: Optional[YieldTermStructureHandle] = None
    settings: Optional[LinearTsrPricerSettings] = None


class LognormalCmsSpreadPricer(BaseModel):
    cmsPricer: CMSCOUPONPRICER
    correlation: QuoteHandle
    couponDiscountCurve: Optional[YieldTermStructureHandle] = None
    IntegrationPoints: Optional[int] = None
    volatilityType: Optional[VolatilityType] = None
    shift1: Optional[float] = None
    shift2: Optional[float] = None


class SwaptionHelper(BaseModel):
    exerciseDate: Date
    endDate: Date
    volatility: QuoteHandle
    index: IBORINDEX
    fixedLegTenor: Period
    fixedLegDayCounter: DAYCOUNTER
    floatingLegDayCounter: DAYCOUNTER
    termStructure: YieldTermStructureHandle
    errorType: Optional[BlackCalibrationHelperCalibrationErrorType] = None
    strike: Optional[float] = None
    nominal: Optional[float] = None
    type: Optional[VolatilityType] = None
    shift: Optional[float] = None


class CapHelper(BaseModel):
    length: Period
    volatility: QuoteHandle
    index: IBORINDEX
    fixedLegFrequency: float
    fixedLegDayCounter: DAYCOUNTER
    includeFirstSwaplet: bool
    termStructure: YieldTermStructureHandle
    errorType: Optional[BlackCalibrationHelperCalibrationErrorType] = None
    type: Optional[VolatilityType] = None
    shift: Optional[float] = None


class HestonModelHelper(BaseModel):
    maturity: Period
    calendar: CALENDAR
    s0: float
    strikePrice: float
    volatility: QuoteHandle
    riskFreeRate: YieldTermStructureHandle
    dividendYield: YieldTermStructureHandle
    errorType: Optional[BlackCalibrationHelperCalibrationErrorType] = None


class VanillaOption(BaseModel):
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE


class EuropeanOption(BaseModel):
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE


class ForwardVanillaOption(BaseModel):
    moneyness: float
    resetDate: Date
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE


class QuantoVanillaOption(BaseModel):
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE


class QuantoForwardVanillaOption(BaseModel):
    moneyness: float
    resetDate: Date
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE


class AnalyticHestonEngineIntegration(BaseModel):
    intAlgo: AnalyticHestonEngineIntegrationAlgorithm
    quadrature: GaussianQuadrature


class AnalyticPTDHestonEngine(BaseModel):
    model: PiecewiseTimeDependentHestonModel
    cpxLog: AnalyticPTDHestonEngineComplexLogFormula
    itg: AnalyticPTDHestonEngineIntegration
    andersenPiterbargEpsilon: Optional[float] = None


class DividendVanillaOption(BaseModel):
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE
    dividendDates: List[Date]
    dividends: List[float]


class BarrierOption(BaseModel):
    barrierType: BarrierType
    barrier: float
    rebate: float
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE


class FdmSchemeDesc(BaseModel):
    type: FdmSchemeDescFdmSchemeType
    theta: float
    mu: float


class FdBlackScholesVanillaEngine(BaseModel):
    value: GENERALIZEDBLACKSCHOLESPROCESS
    quantoHelper: FdmQuantoHelper
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    schemeDesc: Optional[FdmSchemeDesc] = None
    localVol: Optional[bool] = None
    illegalLocalVolOverwrite: Optional[float] = None
    cashDividendModel: Optional[FdBlackScholesVanillaEngineCashDividendModel] = None


class FdOrnsteinUhlenbeckVanillaEngine(BaseModel):
    value: OrnsteinUhlenbeckProcess
    rTS: YIELDTERMSTRUCTURE
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    epsilon: Optional[float] = None
    schemeDesc: Optional[FdmSchemeDesc] = None


class FdBatesVanillaEngine(BaseModel):
    model: BatesModel
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    vGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    schemeDesc: Optional[FdmSchemeDesc] = None


class FdHestonVanillaEngine(BaseModel):
    model: HESTONMODEL
    quantoHelper: FdmQuantoHelper
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    vGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    schemeDesc: Optional[FdmSchemeDesc] = None
    leverageFct: Optional[LOCALVOLTERMSTRUCTURE] = None


class FdCEVVanillaEngine(BaseModel):
    f0: float
    alpha: float
    beta: float
    rTS: YieldTermStructureHandle
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    scalingFactor: Optional[float] = None
    eps: Optional[float] = None
    schemeDesc: Optional[FdmSchemeDesc] = None


class FdSabrVanillaEngine(BaseModel):
    f0: float
    alpha: float
    beta: float
    nu: float
    rho: float
    rTS: YieldTermStructureHandle
    tGrid: Optional[int] = None
    fGrid: Optional[int] = None
    xGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    scalingFactor: Optional[float] = None
    eps: Optional[float] = None
    schemeDesc: Optional[FdmSchemeDesc] = None


class FdBlackScholesBarrierEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    schemeDesc: Optional[FdmSchemeDesc] = None
    localVol: Optional[bool] = None
    illegalLocalVolOverwrite: Optional[float] = None


class ContinuousAveragingAsianOption(BaseModel):
    averageType: AverageType
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE


class DiscreteAveragingAsianOption(BaseModel):
    averageType: AverageType
    runningAccumulator: float
    pastFixings: int
    fixingDates: List[Date]
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE


class DoubleBarrierOption(BaseModel):
    barrierType: DoubleBarrierType
    barrier_lo: float
    barrier_hi: float
    rebate: float
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE


class QuantoDoubleBarrierOption(BaseModel):
    barrierType: DoubleBarrierType
    barrier_lo: float
    barrier_hi: float
    rebate: float
    payoff: STRIKEDTYPEPAYOFF
    exercise: EXERCISE


class DeltaVolQuote(BaseModel):
    delta: float
    vol: QuoteHandle
    maturity: float
    deltaType: DeltaVolQuoteDeltaType


class DeltaVolQuoteHandle(BaseModel):
    value: Optional[DeltaVolQuote] = None


class VannaVolgaBarrierEngine(BaseModel):
    atmVol: DeltaVolQuoteHandle
    vol25Put: DeltaVolQuoteHandle
    vol25Call: DeltaVolQuoteHandle
    spotFX: QuoteHandle
    domesticTS: YieldTermStructureHandle
    foreignTS: YieldTermStructureHandle
    adaptVanDelta: Optional[bool] = None
    bsPriceWithSmile: Optional[float] = None


class FdSimpleBSSwingEngine(BaseModel):
    process: GENERALIZEDBLACKSCHOLESPROCESS
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    schemeDesc: Optional[FdmSchemeDesc] = None


class GJRGARCHModel(BaseModel):
    process: GJRGARCHProcess


class AnalyticGJRGARCHEngine(BaseModel):
    process: GJRGARCHModel


class BasketOption(BaseModel):
    payoff: BASKETPAYOFF
    exercise: EXERCISE


class Fd2dBlackScholesVanillaEngine(BaseModel):
    p1: GENERALIZEDBLACKSCHOLESPROCESS
    p2: GENERALIZEDBLACKSCHOLESPROCESS
    correlation: float
    xGrid: Optional[int] = None
    yGrid: Optional[int] = None
    tGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    schemeDesc: Optional[FdmSchemeDesc] = None
    localVol: Optional[bool] = None
    illegalLocalVolOverwrite: Optional[float] = None


class EverestOption(BaseModel):
    notional: float
    guarantee: float
    exercise: EXERCISE


class BlackDeltaCalculator(BaseModel):
    ot: OptionType
    dt: DeltaVolQuoteDeltaType
    spot: float
    dDiscount: DiscountFactor
    fDiscount: DiscountFactor
    stDev: float


class OvernightIndexedSwap(BaseModel):
    type: OvernightIndexedSwapType
    nominals: List[float]
    schedule: Schedule
    fixedRate: float
    fixedDC: DAYCOUNTER
    index: OVERNIGHTINDEX
    spread: Optional[float] = None
    paymentLag: Optional[float] = None
    paymentAdjustment: Optional[BusinessDayConvention] = None
    paymentCalendar: Optional[CALENDAR] = None
    telescopicValueDates: Optional[bool] = None


class ZeroCouponInflationSwap(BaseModel):
    type: ZeroCouponInflationSwapType
    nominal: float
    start: Date
    maturity: Date
    calendar: CALENDAR
    convention: BusinessDayConvention
    dayCounter: DAYCOUNTER
    fixedRate: float
    index: ZEROINFLATIONINDEX
    lag: Period
    adjustInfObsDates: Optional[bool] = None
    infCalendar: Optional[CALENDAR] = None
    infConvention: Optional[BusinessDayConvention] = None


class YearOnYearInflationSwap(BaseModel):
    type: YearOnYearInflationSwapType
    nominal: float
    fixedSchedule: Schedule
    fixedRate: float
    fixedDayCounter: DAYCOUNTER
    yoySchedule: Schedule
    index: YOYINFLATIONINDEX
    lag: Period
    spread: float
    yoyDayCounter: DAYCOUNTER
    paymentCalendar: CALENDAR
    paymentConvention: Optional[BusinessDayConvention] = None


class CPISwap(BaseModel):
    type: CPISwapType
    nominal: float
    subtractInflationNominal: bool
    spread: float
    floatDayCount: DAYCOUNTER
    floatSchedule: Schedule
    floatRoll: BusinessDayConvention
    fixingDays: float
    floatIndex: IBORINDEX
    fixedRate: float
    baseCPI: float
    fixedDayCount: DAYCOUNTER
    fixedSchedule: Schedule
    fixedRoll: BusinessDayConvention
    observationLag: Period
    fixedIndex: ZEROINFLATIONINDEX
    observationInterpolation: Optional[CPIInterpolationType] = None
    inflationNominal: Optional[float] = None


class FdG2SwaptionEngine(BaseModel):
    model: G2
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    yGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    invEps: Optional[float] = None
    schemeDesc: Optional[FdmSchemeDesc] = None


class FdHullWhiteSwaptionEngine(BaseModel):
    model: HullWhite
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    invEps: Optional[float] = None
    schemeDesc: Optional[FdmSchemeDesc] = None


class Bond(BaseModel):
    settlementDays: float
    calendar: CALENDAR
    issueDate: Optional[Date] = None
    coupons: Optional[Leg] = None


class CPIBond(BaseModel):
    settlementDays: float
    faceAmount: float
    growthOnly: bool
    baseCPI: float
    observationLag: Period
    cpiIndex: ZEROINFLATIONINDEX
    observationInterpolation: CPIInterpolationType
    schedule: Schedule
    coupons: List[float]
    accrualDayCounter: DAYCOUNTER
    paymentConvention: Optional[BusinessDayConvention] = None
    issueDate: Optional[Date] = None
    paymentCalendar: Optional[CALENDAR] = None
    exCouponPeriod: Optional[Period] = None
    exCouponCalendar: Optional[CALENDAR] = None
    exCouponConvention: Optional[BusinessDayConvention] = None
    exCouponEndOfMonth: Optional[bool] = None


class ConvertibleZeroCouponBond(BaseModel):
    exercise: EXERCISE
    conversionRatio: float
    dividends: List[DIVIDEND]
    callability: List[CALLABILITY]
    creditSpread: QuoteHandle
    issueDate: Date
    settlementDays: int
    dayCounter: DAYCOUNTER
    schedule: Schedule
    redemption: Optional[float] = None


class ConvertibleFixedCouponBond(BaseModel):
    exercise: EXERCISE
    conversionRatio: float
    dividends: List[DIVIDEND]
    callability: List[CALLABILITY]
    creditSpread: QuoteHandle
    issueDate: Date
    settlementDays: int
    coupons: List[float]
    dayCounter: DAYCOUNTER
    schedule: Schedule
    redemption: Optional[float] = None


class ConvertibleFloatingRateBond(BaseModel):
    exercise: EXERCISE
    conversionRatio: float
    dividends: List[DIVIDEND]
    callability: List[CALLABILITY]
    creditSpread: QuoteHandle
    issueDate: Date
    settlementDays: int
    index: IBORINDEX
    fixingDays: int
    spreads: List[float]
    dayCounter: DAYCOUNTER
    schedule: Schedule
    redemption: Optional[float] = None


class FraRateHelper(BaseModel):
    rate: float
    immOffsetStart: float
    immOffsetEnd: float
    iborIndex: IBORINDEX
    pillar: Optional[PillarChoice] = None
    customPillarDate: Optional[Date] = None
    useIndexedCoupon: Optional[bool] = None


class FuturesRateHelper(BaseModel):
    price: float
    iborStartDate: Date
    index: IBORINDEX
    convexityAdjustment: Optional[float] = None
    type: Optional[FuturesType] = None


class SwapRateHelper(BaseModel):
    rate: float
    index: SWAPINDEX
    spread: Optional[QuoteHandle] = None
    fwdStart: Optional[Period] = None
    discountingCurve: Optional[YieldTermStructureHandle] = None
    pillar: Optional[PillarChoice] = None
    customPillarDate: Optional[Date] = None


class BondHelper(BaseModel):
    cleanPrice: QuoteHandle
    bond: BOND
    useCleanPrice: Optional[bool] = None


class OISRateHelper(BaseModel):
    settlementDays: float
    tenor: Period
    rate: QuoteHandle
    index: OVERNIGHTINDEX
    discountingCurve: Optional[YieldTermStructureHandle] = None
    telescopicValueDates: Optional[bool] = None
    paymentLag: Optional[float] = None
    paymentConvention: Optional[BusinessDayConvention] = None
    paymentFrequency: Optional[float] = None
    paymentCalendar: Optional[CALENDAR] = None
    forwardStart: Optional[Period] = None
    overnightSpread: Optional[float] = None
    pillar: Optional[PillarChoice] = None
    customPillarDate: Optional[Date] = None


class OvernightIndexFutureRateHelper(BaseModel):
    price: QuoteHandle
    valueDate: Date
    maturityDate: Date
    index: OVERNIGHTINDEX
    convexityAdjustment: Optional[QuoteHandle] = None
    type: Optional[OvernightIndexFutureNettingType] = None


class SofrFutureRateHelper(BaseModel):
    price: float
    referenceMonth: conint(ge=1, le=12)  # type: ignore
    referenceYear: conint(ge=1900, le=2999)  # type: ignore
    referenceFreq: float
    index: OVERNIGHTINDEX
    convexityAdjustment: Optional[float] = None
    type: Optional[OvernightIndexFutureNettingType] = None


class FaceValueAccrualClaim(BaseModel):
    bond: BOND


class CreditDefaultSwap(BaseModel):
    side: ProtectionSide
    notional: float
    upfront: float
    spread: float
    schedule: Schedule
    paymentConvention: BusinessDayConvention
    dayCounter: DAYCOUNTER
    settlesAccrual: Optional[bool] = None
    paysAtDefaultTime: Optional[bool] = None
    protectionStart: Optional[Date] = None
    upfrontDate: Optional[Date] = None
    claim: Optional[CLAIM] = None
    lastPeriodDayCounter: Optional[DAYCOUNTER] = None
    rebatesAccrual: Optional[bool] = None


class IsdaCdsEngine(BaseModel):
    probability: DefaultProbabilityTermStructureHandle
    recoveryRate: float
    discountCurve: YieldTermStructureHandle
    includeSettlementDateFlows: Optional[bool] = None
    numericalFix: Optional[IsdaCdsEngineNumericalFix] = None
    accrualBias: Optional[IsdaCdsEngineAccrualBias] = None
    forwardsInCouponPeriod: Optional[IsdaCdsEngineForwardsInCouponPeriod] = None


class CdsOption(BaseModel):
    swap: CreditDefaultSwap
    exercise: EXERCISE
    knocksOut: Optional[bool] = None


class FdmDirichletBoundary(BaseModel):
    mesher: FDMMESHER
    valueOnBoundary: float
    direction: int
    side: FdmDirichletBoundarySide


class FdmDiscountDirichletBoundary(BaseModel):
    mesher: FDMMESHER
    rTS: YIELDTERMSTRUCTURE
    maturityTime: float
    valueOnBoundary: float
    direction: int
    side: FdmDiscountDirichletBoundarySide


class FdmBatesOp(BaseModel):
    mesher: FDMMESHER
    batesProcess: BatesProcess
    bcSet: FdmBoundaryConditionSet
    integroIntegrationOrder: int
    quantoHelper: Optional[FdmQuantoHelper] = None


class FdmSquareRootFwdOp(BaseModel):
    mesher: FDMMESHER
    kappa: float
    theta: float
    sigma: float
    direction: int
    type: Optional[FdmSquareRootFwdOpTransformationType] = None


class FdmHestonFwdOp(BaseModel):
    mesher: FDMMESHER
    process: HESTONPROCESS
    type: Optional[FdmSquareRootFwdOpTransformationType] = None
    leverageFct: Optional[LOCALVOLTERMSTRUCTURE] = None


class CraigSneydScheme(BaseModel):
    theta: float
    mu: float
    map: FDMLINEAROPCOMPOSITE
    bcSet: Optional[FdmBoundaryConditionSet] = None


class ImplicitEulerScheme(BaseModel):
    map: FDMLINEAROPCOMPOSITE
    bcSet: Optional[FdmBoundaryConditionSet] = None
    relTol: Optional[float] = None
    solverType: Optional[ImplicitEulerSchemeSolverType] = None


class CrankNicolsonScheme(BaseModel):
    theta: float
    map: FDMLINEAROPCOMPOSITE
    bcSet: Optional[FdmBoundaryConditionSet] = None
    relTol: Optional[float] = None
    solverType: Optional[ImplicitEulerSchemeSolverType] = None


class DouglasScheme(BaseModel):
    theta: float
    map: FDMLINEAROPCOMPOSITE
    bcSet: Optional[FdmBoundaryConditionSet] = None


class ExplicitEulerScheme(BaseModel):
    map: FDMLINEAROPCOMPOSITE
    bcSet: Optional[FdmBoundaryConditionSet] = None


class HundsdorferScheme(BaseModel):
    theta: float
    mu: float
    map: FDMLINEAROPCOMPOSITE
    bcSet: Optional[FdmBoundaryConditionSet] = None


class MethodOfLinesScheme(BaseModel):
    eps: float
    relInitStepSize: float
    map: FDMLINEAROPCOMPOSITE
    bcSet: Optional[FdmBoundaryConditionSet] = None


class ModifiedCraigSneydScheme(BaseModel):
    theta: float
    mu: float
    map: FDMLINEAROPCOMPOSITE
    bcSet: Optional[FdmBoundaryConditionSet] = None


class Fdm1DimSolver(BaseModel):
    solverDesc: FdmSolverDesc
    schemeDesc: FdmSchemeDesc
    op: FDMLINEAROPCOMPOSITE


class FdmBackwardSolver(BaseModel):
    map: FDMLINEAROPCOMPOSITE
    bcSet: FdmBoundaryConditionSet
    condition: FdmStepConditionComposite
    schemeDesc: FdmSchemeDesc


class Fdm2DimSolver(BaseModel):
    solverDesc: FdmSolverDesc
    schemeDesc: FdmSchemeDesc
    op: FDMLINEAROPCOMPOSITE


class Fdm3DimSolver(BaseModel):
    solverDesc: FdmSolverDesc
    schemeDesc: FdmSchemeDesc
    op: FDMLINEAROPCOMPOSITE


class FdmIndicesOnBoundary(BaseModel):
    l: FdmLinearOpLayout
    direction: int
    side: FdmDirichletBoundarySide


class FittedBondDiscountCurve(BaseModel):
    referenceDate: Date
    helpers: List[BONDHELPER]
    dayCounter: DAYCOUNTER
    fittingMethod: FITTINGMETHOD
    accuracy: Optional[float] = None
    maxEvaluations: Optional[int] = None
    guess: Optional[Array] = None
    simplexLambda: Optional[float] = None


class FixedRateBondForward(BaseModel):
    valueDate: Date
    maturityDate: Date
    type: PositionType
    strike: float
    settlementDays: float
    dayCounter: DAYCOUNTER
    calendar: CALENDAR
    businessDayConvention: BusinessDayConvention
    fixedBond: FixedRateBond
    discountCurve: Optional[YieldTermStructureHandle] = None
    incomeDiscountCurve: Optional[YieldTermStructureHandle] = None


class ForwardRateAgreement(BaseModel):
    valueDate: Date
    maturityDate: Date
    type: PositionType
    strikeForwardRate: float
    notionalAmount: float
    index: IBORINDEX
    discountCurve: Optional[YieldTermStructureHandle] = None
    useIndexedCoupon: Optional[bool] = None


class MarkovFunctional(BaseModel):
    termStructure: YieldTermStructureHandle
    reversion: float
    volstepdates: List[Date]
    volatilities: List[float]
    capletVol: OptionletVolatilityStructureHandle
    capletExpiries: List[Date]
    iborIndex: IBORINDEX
    modelSettings: Optional[MarkovFunctionalModelSettings] = None


class Gaussian1dSwaptionEngine(BaseModel):
    model: GAUSSIAN1DMODEL
    integrationPoints: Optional[int] = None
    stddevs: Optional[float] = None
    extrapolatePayoff: Optional[bool] = None
    flatPayoffExtrapolation: Optional[bool] = None
    discountCurve: Optional[YieldTermStructureHandle] = None
    probabilities: Optional[Gaussian1dSwaptionEngineProbabilities] = None


class Gaussian1dNonstandardSwaptionEngine(BaseModel):
    model: GAUSSIAN1DMODEL
    integrationPoints: Optional[int] = None
    stddevs: Optional[float] = None
    extrapolatePayoff: Optional[bool] = None
    flatPayoffExtrapolation: Optional[bool] = None
    oas: Optional[QuoteHandle] = None
    discountCurve: Optional[YieldTermStructureHandle] = None
    probabilities: Optional[Gaussian1dNonstandardSwaptionEngineProbabilities] = None


class Gaussian1dFloatFloatSwaptionEngine(BaseModel):
    model: GAUSSIAN1DMODEL
    integrationPoints: Optional[int] = None
    stddevs: Optional[float] = None
    extrapolatePayoff: Optional[bool] = None
    flatPayoffExtrapolation: Optional[bool] = None
    oas: Optional[QuoteHandle] = None
    discountCurve: Optional[YieldTermStructureHandle] = None
    includeTodaysExercise: Optional[bool] = None
    probabilities: Optional[Gaussian1dFloatFloatSwaptionEngineProbabilities] = None


class SobolRsg(BaseModel):
    dimensionality: int
    seed: Optional[int] = None
    directionIntegers: Optional[SobolRsgDirectionIntegers] = None


class UniformLowDiscrepancySequenceGenerator(BaseModel):
    dimensionality: int
    seed: Optional[int] = None
    directionIntegers: Optional[SobolRsgDirectionIntegers] = None


class GaussianLowDiscrepancySequenceGenerator(BaseModel):
    u: UniformLowDiscrepancySequenceGenerator


class NeumannBC(BaseModel):
    value: float
    side: DefaultBoundaryConditionSide


class DirichletBC(BaseModel):
    value: float
    side: DefaultBoundaryConditionSide


class SobolBrownianGeneratorFactory(BaseModel):
    ordering: SobolBrownianGeneratorOrdering
    seed: Optional[int] = None
    directionIntegers: Optional[SobolRsgDirectionIntegers] = None


class FdHestonBarrierEngine(BaseModel):
    model: HESTONMODEL
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    vGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    schemeDesc: Optional[FdmSchemeDesc] = None
    leverageFct: Optional[LOCALVOLTERMSTRUCTURE] = None


class FdHestonDoubleBarrierEngine(BaseModel):
    model: HESTONMODEL
    tGrid: Optional[int] = None
    xGrid: Optional[int] = None
    vGrid: Optional[int] = None
    dampingSteps: Optional[int] = None
    schemeDesc: Optional[FdmSchemeDesc] = None
    leverageFct: Optional[LOCALVOLTERMSTRUCTURE] = None


class OptionletStripper1(BaseModel):
    parVolSurface: CapFloorTermVolSurface
    index: IBORINDEX
    switchStrikes: Optional[float] = None
    accuracy: Optional[float] = None
    maxIter: Optional[float] = None
    discount: Optional[YieldTermStructureHandle] = None
    type: Optional[VolatilityType] = None
    displacement: Optional[float] = None
    dontThrow: Optional[bool] = None


class Swaption(BaseModel):
    swap: VanillaSwap
    exercise: EXERCISE
    type: Optional[SettlementType] = None
    settlementMethod: Optional[SettlementMethod] = None


class NonstandardSwaption(BaseModel):
    swap: NonstandardSwap
    exercise: EXERCISE
    type: Optional[SettlementType] = None
    settlementMethod: Optional[SettlementMethod] = None


class FloatFloatSwaption(BaseModel):
    swap: FloatFloatSwap
    exercise: EXERCISE
    delivery: Optional[SettlementType] = None
    settlementMethod: Optional[SettlementMethod] = None


class HestonBlackVolSurface(BaseModel):
    hestonModel: HestonModelHandle
    cpxLogFormula: Optional[AnalyticHestonEngineComplexLogFormula] = None
    integration: Optional[AnalyticHestonEngineIntegration] = None


class AnalyticHestonEngine(BaseModel):
    model: HESTONMODEL
    cpxLog: AnalyticHestonEngineComplexLogFormula
    itg: AnalyticHestonEngineIntegration
    andersenPiterbargEpsilon: Optional[float] = None


class AssetSwap(BaseModel):
    payFixedRate: bool
    bond: BOND
    bondCleanPrice: float
    index: IBORINDEX
    spread: float
    floatSchedule: Optional[Schedule] = None
    floatingDayCount: Optional[DAYCOUNTER] = None
    parAssetSwap: Optional[bool] = None


CashFlows.update_forward_refs()


STRIPPEDOPTIONLETBASE = Union[StrippedOptionletBase, OptionletStripper1]
CAPFLOORTERMVOLATILITYSTRUCTURE = Union[
    CapFloorTermVolatilityStructure, CapFloorTermVolCurve, CapFloorTermVolSurface
]
STATISTICS = Union[Statistics, RiskStatistics]
BROWNIANGENERATORFACTORY = Union[
    BrownianGeneratorFactory, MTBrownianGeneratorFactory, SobolBrownianGeneratorFactory
]
TRIDIAGONALOPERATOR = Union[TridiagonalOperator, DPlus, DMinus, DZero, DPlusDMinus]
DEFAULTBOUNDARYCONDITION = Union[DefaultBoundaryCondition, NeumannBC, DirichletBC]
GAUSSIAN1DMODEL = Union[Gaussian1dModel, Gsr, MarkovFunctional]
TERMSTRUCTURECONSISTENTMODEL = Union[TermStructureConsistentModel, GAUSSIAN1DMODEL]
FORWARD = Union[Forward, FixedRateBondForward, ForwardRateAgreement]
FITTINGMETHOD = Union[
    FittingMethod,
    ExponentialSplinesFitting,
    NelsonSiegelFitting,
    SvenssonFitting,
    CubicBSplinesFitting,
    SimplePolynomialFitting,
]
RISKNEUTRALDENSITYCALCULATOR = Union[
    RiskNeutralDensityCalculator,
    BSMRNDCalculator,
    CEVRNDCalculator,
    GBSMRNDCalculator,
    HestonRNDCalculator,
    LocalVolRNDCalculator,
    SquareRootProcessRNDCalculator,
]
FDMCELLAVERAGINGINNERVALUE = Union[FdmCellAveragingInnerValue, FdmLogInnerValue]
FDMINNERVALUECALCULATOR = Union[
    FdmInnerValueCalculator,
    FDMCELLAVERAGINGINNERVALUE,
    FdmLogBasketInnerValue,
    FdmZeroInnerValue,
]
NINEPOINTLINEAROP = Union[NinePointLinearOp, SecondOrderMixedDerivativeOp]
TRIPLEBANDLINEAROP = Union[TripleBandLinearOp, FirstDerivativeOp, SecondDerivativeOp]
FDMBOUNDARYCONDITION = Union[
    FdmBoundaryCondition,
    FdmDirichletBoundary,
    FdmDiscountDirichletBoundary,
    FdmTimeDepDirichletBoundary,
]
FDMLINEAROPCOMPOSITE = Union[
    FdmLinearOpComposite,
    FdmBatesOp,
    FdmBlackScholesOp,
    Fdm2dBlackScholesOp,
    FdmCEVOp,
    FdmG2Op,
    FdmHestonHullWhiteOp,
    FdmHestonOp,
    FdmHullWhiteOp,
    FdmLocalVolFwdOp,
    FdmOrnsteinUhlenbeckOp,
    FdmSabrOp,
    FdmZabrOp,
    FdmDupire1dOp,
    FdmBlackScholesFwdOp,
    FdmSquareRootFwdOp,
    FdmHestonFwdOp,
]
FDMLINEAROP = Union[
    FdmLinearOp,
    FDMLINEAROPCOMPOSITE,
    TRIPLEBANDLINEAROP,
    NINEPOINTLINEAROP,
    NthOrderDerivativeOp,
]
FDMMESHER = Union[FdmMesher, FdmMesherComposite]
FDM1DMESHER = Union[
    Fdm1dMesher,
    FdmBlackScholesMesher,
    Concentrating1dMesher,
    ExponentialJump1dMesher,
    FdmCEV1dMesher,
    FdmHestonVarianceMesher,
    FdmHestonLocalVolatilityVarianceMesher,
    FdmSimpleProcess1dMesher,
    Uniform1dMesher,
    Predefined1dMesher,
    Glued1dMesher,
]
CLAIM = Union[Claim, FaceValueClaim, FaceValueAccrualClaim]
DEFAULTPROBABILITYHELPER = Union[
    DefaultProbabilityHelper, SpreadCdsHelper, UpfrontCdsHelper
]
DEFAULTPROBABILITYTERMSTRUCTURE = Union[
    DefaultProbabilityTermStructure, FlatHazardRate, PiecewiseFlatHazardRate
]
OVERNIGHTINDEXFUTURERATEHELPER = Union[
    OvernightIndexFutureRateHelper, SofrFutureRateHelper
]
BONDHELPER = Union[BondHelper, FixedRateBondHelper]
RATEHELPER = Union[
    RateHelper,
    DepositRateHelper,
    FraRateHelper,
    FuturesRateHelper,
    SwapRateHelper,
    BONDHELPER,
    OISRateHelper,
    DatedOISRateHelper,
    FxSwapRateHelper,
    OVERNIGHTINDEXFUTURERATEHELPER,
]
DIVIDEND = Union[Dividend, FixedDividend, FractionalDividend]
CAPFLOOR = Union[CapFloor, Cap, Floor, Collar]
CALLABLEBOND = Union[CallableBond, CallableFixedRateBond]
BOND = Union[
    Bond,
    ZeroCouponBond,
    FixedRateBond,
    AmortizingFixedRateBond,
    AmortizingFloatingRateBond,
    FloatingRateBond,
    CmsRateBond,
    CALLABLEBOND,
    CPIBond,
    ConvertibleZeroCouponBond,
    ConvertibleFixedCouponBond,
    ConvertibleFloatingRateBond,
]
VASICEK = Union[Vasicek, HullWhite]
ONEFACTORAFFINEMODEL = Union[OneFactorAffineModel, VASICEK]
SHORTRATEMODEL = Union[ShortRateModel, ONEFACTORAFFINEMODEL, BlackKarasinski, G2]
YOYINFLATIONCAPFLOOR = Union[
    YoYInflationCapFloor, YoYInflationCap, YoYInflationFloor, YoYInflationCollar
]
INFLATIONCOUPON = Union[InflationCoupon, CPICoupon]
YOYINFLATIONINDEX = Union[
    YoYInflationIndex, YYEUHICP, YYEUHICPXT, YYFRHICP, YYUKRPI, YYUSCPI, YYZACPI
]
ZEROINFLATIONINDEX = Union[
    ZeroInflationIndex, EUHICP, EUHICPXT, FRHICP, UKRPI, USCPI, ZACPI
]
INFLATIONINDEX = Union[InflationIndex, ZEROINFLATIONINDEX, YOYINFLATIONINDEX]
REGION = Union[Region, CustomRegion]
INFLATIONTERMSTRUCTURE = Union[
    InflationTermStructure, YoYInflationTermStructure, ZeroInflationTermStructure
]
SEASONALITY = Union[Seasonality, MultiplicativePriceSeasonality]
SWAP = Union[
    Swap,
    VanillaSwap,
    NonstandardSwap,
    AssetSwap,
    FloatFloatSwap,
    OvernightIndexedSwap,
    ZeroCouponInflationSwap,
    YearOnYearInflationSwap,
    CPISwap,
]
CALLABILITY = Union[Callability, SoftCallability]
MULTIASSETOPTION = Union[MultiAssetOption, BasketOption, EverestOption, HimalayaOption]
BASKETPAYOFF = Union[
    BasketPayoff,
    MinBasketPayoff,
    MaxBasketPayoff,
    AverageBasketPayoff,
    SpreadBasketPayoff,
]
STRIKEDTYPEPAYOFF = Union[
    StrikedTypePayoff,
    PlainVanillaPayoff,
    PercentageStrikePayoff,
    CashOrNothingPayoff,
    AssetOrNothingPayoff,
    SuperSharePayoff,
    GapPayoff,
    VanillaForwardPayoff,
]
DOUBLEBARRIEROPTION = Union[DoubleBarrierOption, QuantoDoubleBarrierOption]
HESTONMODEL = Union[HestonModel, BatesModel]
CALIBRATEDMODEL = Union[
    CalibratedModel,
    HESTONMODEL,
    PiecewiseTimeDependentHestonModel,
    GJRGARCHModel,
    SHORTRATEMODEL,
]
PRICINGENGINE = Union[
    PricingEngine,
    AnalyticEuropeanEngine,
    AnalyticHestonEngine,
    COSHestonEngine,
    AnalyticPTDHestonEngine,
    BatesEngine,
    IntegralEngine,
    FDBermudanEngine,
    FDEuropeanEngine,
    BinomialCRRVanillaEngine,
    BinomialJRVanillaEngine,
    BinomialTrigeorgisVanillaEngine,
    BinomialTianVanillaEngine,
    BinomialJoshi4VanillaEngine,
    FDAmericanEngine,
    FDShoutEngine,
    ContinuousArithmeticAsianLevyEngine,
    FdBlackScholesAsianEngine,
    BaroneAdesiWhaleyApproximationEngine,
    BjerksundStenslandApproximationEngine,
    JuQuadraticApproximationEngine,
    AnalyticDigitalAmericanEngine,
    AnalyticDigitalAmericanKOEngine,
    AnalyticDividendEuropeanEngine,
    AnalyticBarrierEngine,
    FdBlackScholesVanillaEngine,
    FdOrnsteinUhlenbeckVanillaEngine,
    FdBatesVanillaEngine,
    FdHestonVanillaEngine,
    AnalyticCEVEngine,
    FdCEVVanillaEngine,
    FdSabrVanillaEngine,
    FdBlackScholesBarrierEngine,
    AnalyticBinaryBarrierEngine,
    ForwardEuropeanEngine,
    QuantoEuropeanEngine,
    QuantoForwardEuropeanEngine,
    AnalyticContinuousGeometricAveragePriceAsianEngine,
    AnalyticDiscreteGeometricAveragePriceAsianEngine,
    AnalyticDiscreteGeometricAverageStrikeAsianEngine,
    VarianceGammaEngine,
    FFTVarianceGammaEngine,
    AnalyticDoubleBarrierEngine,
    WulinYongDoubleBarrierEngine,
    VannaVolgaBarrierEngine,
    AnalyticDoubleBarrierBinaryEngine,
    FdSimpleBSSwingEngine,
    FdSimpleExtOUJumpSwingEngine,
    AnalyticGJRGARCHEngine,
    StulzEngine,
    KirkEngine,
    Fd2dBlackScholesVanillaEngine,
    DiscountingSwapEngine,
    JamshidianSwaptionEngine,
    TreeSwaptionEngine,
    AnalyticCapFloorEngine,
    TreeCapFloorEngine,
    G2SwaptionEngine,
    FdG2SwaptionEngine,
    FdHullWhiteSwaptionEngine,
    DiscountingBondEngine,
    TreeCallableFixedRateBondEngine,
    BlackCallableFixedRateBondEngine,
    BlackCapFloorEngine,
    BachelierCapFloorEngine,
    MidPointCdsEngine,
    IntegralCdsEngine,
    IsdaCdsEngine,
    BlackCdsOptionEngine,
    Gaussian1dSwaptionEngine,
    Gaussian1dJamshidianSwaptionEngine,
    Gaussian1dNonstandardSwaptionEngine,
    Gaussian1dFloatFloatSwaptionEngine,
    FdHestonBarrierEngine,
    FdHestonDoubleBarrierEngine,
    BlackSwaptionEngine,
    BachelierSwaptionEngine,
]
FORWARDVANILLAOPTION = Union[ForwardVanillaOption, QuantoForwardVanillaOption]
VANILLAOPTION = Union[VanillaOption, EuropeanOption]
ONEASSETOPTION = Union[
    OneAssetOption,
    VANILLAOPTION,
    FORWARDVANILLAOPTION,
    QuantoVanillaOption,
    DividendVanillaOption,
    BarrierOption,
    ContinuousAveragingAsianOption,
    DiscreteAveragingAsianOption,
    DOUBLEBARRIEROPTION,
    VanillaSwingOption,
]
OPTION = Union[Option, ONEASSETOPTION, MULTIASSETOPTION, CdsOption, Swaption]
TYPEPAYOFF = Union[TypePayoff, STRIKEDTYPEPAYOFF]
PAYOFF = Union[Payoff, TYPEPAYOFF, BASKETPAYOFF]
PARAMETER = Union[
    Parameter, ConstantParameter, NullParameter, PiecewiseConstantParameter
]
BLACKCALIBRATIONHELPER = Union[
    BlackCalibrationHelper, SwaptionHelper, CapHelper, HestonModelHelper
]
CALIBRATIONHELPER = Union[CalibrationHelper, BLACKCALIBRATIONHELPER]
CMSSPREADCOUPONPRICER = Union[CmsSpreadCouponPricer, LognormalCmsSpreadPricer]
CMSCOUPONPRICER = Union[
    CmsCouponPricer, AnalyticHaganPricer, NumericHaganPricer, LinearTsrPricer
]
IBORCOUPONPRICER = Union[IborCouponPricer, BlackIborCouponPricer]
FLOATINGRATECOUPONPRICER = Union[
    FloatingRateCouponPricer, IBORCOUPONPRICER, CMSCOUPONPRICER, CMSSPREADCOUPONPRICER
]
CAPPEDFLOOREDCOUPON = Union[
    CappedFlooredCoupon,
    CappedFlooredIborCoupon,
    CappedFlooredCmsCoupon,
    CappedFlooredCmsSpreadCoupon,
]
FLOATINGRATECOUPON = Union[
    FloatingRateCoupon,
    OvernightIndexedCoupon,
    CAPPEDFLOOREDCOUPON,
    IborCoupon,
    CmsCoupon,
    CmsSpreadCoupon,
]
COUPON = Union[Coupon, FixedRateCoupon, FLOATINGRATECOUPON, INFLATIONCOUPON]
CASHFLOW = Union[
    CashFlow, SimpleCashFlow, Redemption, AmortizingPayment, COUPON, DIVIDEND
]
INSTRUMENT = Union[
    Instrument,
    Stock,
    CompositeInstrument,
    OPTION,
    SWAP,
    YOYINFLATIONCAPFLOOR,
    BOND,
    CAPFLOOR,
    CreditDefaultSwap,
    FORWARD,
    NonstandardSwaption,
    FloatFloatSwaption,
]
HESTONPROCESS = Union[HestonProcess, BatesProcess]
GENERALIZEDBLACKSCHOLESPROCESS = Union[
    GeneralizedBlackScholesProcess,
    BlackScholesProcess,
    BlackScholesMertonProcess,
    BlackProcess,
    GarmanKohlagenProcess,
]
STOCHASTICPROCESS1D = Union[
    StochasticProcess1D,
    GENERALIZEDBLACKSCHOLESPROCESS,
    Merton76Process,
    GeometricBrownianMotionProcess,
    VarianceGammaProcess,
    HullWhiteProcess,
    HullWhiteForwardProcess,
    GsrProcess,
    OrnsteinUhlenbeckProcess,
    ExtendedOrnsteinUhlenbeckProcess,
]
STOCHASTICPROCESS = Union[
    StochasticProcess,
    STOCHASTICPROCESS1D,
    StochasticProcessArray,
    HESTONPROCESS,
    G2Process,
    G2ForwardProcess,
    ExtOUWithJumpsProcess,
    KlugeExtOUProcess,
    GJRGARCHProcess,
    HestonSLVProcess,
]
SMILESECTION = Union[
    SmileSection,
    FlatSmileSection,
    SabrSmileSection,
    KahaleSmileSection,
    NoArbSabrSmileSection,
    NoArbSabrInterpolatedSmileSection,
]
SWAPTIONVOLATILITYDISCRETE = Union[
    SwaptionVolatilityDiscrete,
    SwaptionVolatilityMatrix,
    SwaptionVolCube1,
    SwaptionVolCube2,
]
SWAPTIONVOLATILITYSTRUCTURE = Union[
    SwaptionVolatilityStructure, ConstantSwaptionVolatility, SWAPTIONVOLATILITYDISCRETE
]
OPTIONLETVOLATILITYSTRUCTURE = Union[
    OptionletVolatilityStructure, ConstantOptionletVolatility, StrippedOptionletAdapter
]
LOCALVOLTERMSTRUCTURE = Union[
    LocalVolTermStructure,
    LocalConstantVol,
    LocalVolSurface,
    AndreasenHugeLocalVolAdapter,
]
BLACKVOLTERMSTRUCTURE = Union[
    BlackVolTermStructure,
    BlackConstantVol,
    BlackVarianceCurve,
    BlackVarianceSurface,
    AndreasenHugeVolatilityAdapter,
    HestonBlackVolSurface,
]
VOLATILITYTERMSTRUCTURE = Union[
    VolatilityTermStructure,
    BLACKVOLTERMSTRUCTURE,
    LOCALVOLTERMSTRUCTURE,
    OPTIONLETVOLATILITYSTRUCTURE,
    SWAPTIONVOLATILITYSTRUCTURE,
    CAPFLOORTERMVOLATILITYSTRUCTURE,
]
OPTIMIZATIONMETHOD = Union[
    OptimizationMethod,
    ConjugateGradient,
    Simplex,
    SteepestDescent,
    BFGS,
    LevenbergMarquardt,
    DifferentialEvolution,
    GaussianSimulatedAnnealing,
    MirrorGaussianSimulatedAnnealing,
    LogNormalSimulatedAnnealing,
]
CONSTRAINT = Union[
    Constraint,
    BoundaryConstraint,
    NoConstraint,
    PositiveConstraint,
    CompositeConstraint,
    NonhomogeneousBoundaryConstraint,
]
BIBOR = Union[Bibor, BiborSW, Bibor1M, Bibor2M, Bibor3M, Bibor6M, Bibor9M, Bibor1Y]
SWAPINDEX = Union[
    SwapIndex,
    EuriborSwapIsdaFixA,
    EuriborSwapIsdaFixB,
    EuriborSwapIfrFix,
    EurLiborSwapIsdaFixA,
    EurLiborSwapIsdaFixB,
    EurLiborSwapIfrFix,
    ChfLiborSwapIsdaFix,
    GbpLiborSwapIsdaFix,
    JpyLiborSwapIsdaFixAm,
    JpyLiborSwapIsdaFixPm,
    UsdLiborSwapIsdaFixAm,
    UsdLiborSwapIsdaFixPm,
    OvernightIndexedSwapIndex,
]
OVERNIGHTINDEX = Union[OvernightIndex, Aonia, Eonia, Sonia, FedFunds, Nzocr, Sofr]
EURLIBOR = Union[
    EURLibor,
    EURLiborSW,
    EURLibor2W,
    EURLibor1M,
    EURLibor2M,
    EURLibor3M,
    EURLibor4M,
    EURLibor5M,
    EURLibor6M,
    EURLibor7M,
    EURLibor8M,
    EURLibor9M,
    EURLibor10M,
    EURLibor11M,
    EURLibor1Y,
]
EURIBOR365 = Union[Euribor365]
EURIBOR = Union[
    Euribor,
    EuriborSW,
    Euribor2W,
    Euribor3W,
    Euribor1M,
    Euribor2M,
    Euribor3M,
    Euribor4M,
    Euribor5M,
    Euribor6M,
    Euribor7M,
    Euribor8M,
    Euribor9M,
    Euribor10M,
    Euribor11M,
    Euribor1Y,
]
BKBM = Union[Bkbm, Bkbm1M, Bkbm2M, Bkbm3M, Bkbm4M, Bkbm5M, Bkbm6M]
BBSW = Union[Bbsw, Bbsw1M, Bbsw2M, Bbsw3M, Bbsw4M, Bbsw5M, Bbsw6M]
DAILYTENORLIBOR = Union[DailyTenorLibor, CADLiborON, GBPLiborON, USDLiborON]
IBORINDEX = Union[
    IborIndex,
    OVERNIGHTINDEX,
    Libor,
    DAILYTENORLIBOR,
    AUDLibor,
    CADLibor,
    Cdor,
    CHFLibor,
    DKKLibor,
    BBSW,
    BKBM,
    EURIBOR,
    EURIBOR365,
    EURLIBOR,
    GBPLibor,
    Jibar,
    JPYLibor,
    Mosprime,
    NZDLibor,
    Pribor,
    Robor,
    SEKLibor,
    Shibor,
    Tibor,
    THBFIX,
    TRLibor,
    USDLibor,
    Wibor,
    Zibor,
    BIBOR,
]
INTERESTRATEINDEX = Union[InterestRateIndex, IBORINDEX, SWAPINDEX, SwapSpreadIndex]
INDEX = Union[Index, INTERESTRATEINDEX, INFLATIONINDEX]
YIELDTERMSTRUCTURE = Union[
    YieldTermStructure,
    ImpliedTermStructure,
    ZeroSpreadedTermStructure,
    ForwardSpreadedTermStructure,
    FlatForward,
    PiecewiseFlatForward,
    PiecewiseLogLinearDiscount,
    PiecewiseLinearForward,
    PiecewiseLinearZero,
    PiecewiseCubicZero,
    PiecewiseLogCubicDiscount,
    PiecewiseSplineCubicDiscount,
    PiecewiseKrugerZero,
    PiecewiseKrugerLogDiscount,
    PiecewiseConvexMonotoneZero,
    GlobalLinearSimpleZeroCurve,
    FittedBondDiscountCurve,
    ZeroCurve,
    LogLinearInterpolatedZeroCurve,
    CubicInterpolatedZeroCurve,
    SplineCubicInterpolatedZeroCurve,
    DefaultLogCubicInterpolatedZeroCurve,
    MonotonicCubicInterpolatedZeroCurve,
]
TERMSTRUCTURE = Union[
    TermStructure,
    YIELDTERMSTRUCTURE,
    VOLATILITYTERMSTRUCTURE,
    INFLATIONTERMSTRUCTURE,
    DEFAULTPROBABILITYTERMSTRUCTURE,
]
CURRENCY = Union[
    Currency,
    ARSCurrency,
    ATSCurrency,
    AUDCurrency,
    BDTCurrency,
    BEFCurrency,
    BGLCurrency,
    BRLCurrency,
    BYRCurrency,
    CADCurrency,
    CHFCurrency,
    CLPCurrency,
    CNYCurrency,
    COPCurrency,
    CYPCurrency,
    CZKCurrency,
    DEMCurrency,
    DKKCurrency,
    EEKCurrency,
    ESPCurrency,
    EURCurrency,
    FIMCurrency,
    FRFCurrency,
    GBPCurrency,
    GRDCurrency,
    HKDCurrency,
    HUFCurrency,
    IEPCurrency,
    IDRCurrency,
    ILSCurrency,
    INRCurrency,
    IQDCurrency,
    IRRCurrency,
    ISKCurrency,
    ITLCurrency,
    JPYCurrency,
    KRWCurrency,
    KWDCurrency,
    LTLCurrency,
    LUFCurrency,
    LVLCurrency,
    MTLCurrency,
    MXNCurrency,
    MYRCurrency,
    NLGCurrency,
    NOKCurrency,
    NPRCurrency,
    NZDCurrency,
    PEHCurrency,
    PEICurrency,
    PENCurrency,
    PKRCurrency,
    PLNCurrency,
    PTECurrency,
    ROLCurrency,
    RONCurrency,
    RUBCurrency,
    SARCurrency,
    SEKCurrency,
    SGDCurrency,
    SITCurrency,
    SKKCurrency,
    THBCurrency,
    TRLCurrency,
    TRYCurrency,
    TTDCurrency,
    TWDCurrency,
    USDCurrency,
    VEBCurrency,
    VNDCurrency,
    ZARCurrency,
]
ROUNDING = Union[
    Rounding,
    UpRounding,
    DownRounding,
    ClosestRounding,
    CeilingTruncation,
    FloorTruncation,
]
DAYCOUNTER = Union[
    DayCounter,
    Actual360,
    Actual365Fixed,
    Thirty360,
    ActualActual,
    OneDayCounter,
    SimpleDayCounter,
    Business252,
]
CALENDAR = Union[
    Calendar,
    Argentina,
    Australia,
    Brazil,
    Canada,
    China,
    CzechRepublic,
    Denmark,
    Finland,
    France,
    Germany,
    HongKong,
    Hungary,
    Iceland,
    India,
    Indonesia,
    Israel,
    Italy,
    Japan,
    Mexico,
    NewZealand,
    Norway,
    Poland,
    Russia,
    Romania,
    SaudiArabia,
    Singapore,
    Slovakia,
    SouthAfrica,
    SouthKorea,
    Sweden,
    Switzerland,
    Taiwan,
    TARGET,
    Thailand,
    Turkey,
    Ukraine,
    UnitedKingdom,
    UnitedStates,
    NullCalendar,
    WeekendsOnly,
    JointCalendar,
    BespokeCalendar,
]
QUOTE = Union[Quote, SimpleQuote, DerivedQuote, CompositeQuote, DeltaVolQuote]
OBSERVABLE = Union[
    Observable,
    QUOTE,
    TERMSTRUCTURE,
    INDEX,
    SMILESECTION,
    AndreasenHugeVolatilityInterpl,
    STOCHASTICPROCESS,
    PRICINGENGINE,
    INSTRUMENT,
    CASHFLOW,
    CALIBRATEDMODEL,
    TERMSTRUCTURECONSISTENTMODEL,
    RATEHELPER,
    DEFAULTPROBABILITYHELPER,
]
EXERCISE = Union[
    Exercise,
    EuropeanExercise,
    AmericanExercise,
    BermudanExercise,
    RebatedExercise,
    SwingExercise,
]


BSMRNDCalculator.update_forward_refs()
FDBermudanEngine.update_forward_refs()
Ukraine.update_forward_refs()
Bibor3M.update_forward_refs()
AnalyticHestonEngineIntegrationAlgorithm.update_forward_refs()
CmsMarketCalibrationCalibrationType.update_forward_refs()
UniformRandomSequenceGenerator.update_forward_refs()
TemperatureExponential.update_forward_refs()
FdmHullWhiteOp.update_forward_refs()
InverseCumulativeStudent.update_forward_refs()
FdmDirichletBoundarySide.update_forward_refs()
PercentageStrikePayoff.update_forward_refs()
BermudanExercise.update_forward_refs()
CreditDefaultSwap.update_forward_refs()
SafeBicubicSpline.update_forward_refs()
MidPointCdsEngine.update_forward_refs()
Euribor10M.update_forward_refs()
NonstandardSwaption.update_forward_refs()
AnalyticEuropeanEngine.update_forward_refs()
CumulativeBinomialDistribution.update_forward_refs()
FedFunds.update_forward_refs()
BlackScholesProcess.update_forward_refs()
GarmanKohlagenProcess.update_forward_refs()
ZeroInflationIndex.update_forward_refs()
VanillaSwap.update_forward_refs()
Mosprime.update_forward_refs()
SplineCubicInterpolatedZeroCurve.update_forward_refs()
Bond.update_forward_refs()
ContinuousAveragingAsianOption.update_forward_refs()
SafeBackwardFlatInterpolation.update_forward_refs()
NumericHaganPricer.update_forward_refs()
BaroneAdesiWhaleyApproximationEngine.update_forward_refs()
SafeFritschButlandLogCubic.update_forward_refs()
FxSwapRateHelper.update_forward_refs()
SuperSharePayoff.update_forward_refs()
UniformLowDiscrepancySequenceGenerator.update_forward_refs()
ZeroSpreadedTermStructure.update_forward_refs()
GbpLiborSwapIsdaFix.update_forward_refs()
Euribor3M.update_forward_refs()
BarrierType.update_forward_refs()
Fdm3DimSolver.update_forward_refs()
JamshidianSwaptionEngine.update_forward_refs()
AnalyticCapFloorEngine.update_forward_refs()
FDAmericanEngine.update_forward_refs()
KahaleSmileSection.update_forward_refs()
Singapore.update_forward_refs()
GaussJacobiIntegration.update_forward_refs()
France.update_forward_refs()
BatesModel.update_forward_refs()
USDLiborON.update_forward_refs()
Aonia.update_forward_refs()
KnuthUniformRng.update_forward_refs()
CalibratedModelHandle.update_forward_refs()
CeilingTruncation.update_forward_refs()
StudentDistribution.update_forward_refs()
SettlementMethod.update_forward_refs()
JointCalendarRule.update_forward_refs()
AndreasenHugeVolatilityInterplInterpolationType.update_forward_refs()
OptionletStripper1.update_forward_refs()
FdmDividendHandler.update_forward_refs()
ExponentialSplinesFitting.update_forward_refs()
FdHestonVanillaEngine.update_forward_refs()
FuturesRateHelper.update_forward_refs()
Merton76Process.update_forward_refs()
CumulativeChiSquareDistribution.update_forward_refs()
Bbsw.update_forward_refs()
OptionletVolatilityStructureHandle.update_forward_refs()
FdSimpleBSSwingEngine.update_forward_refs()
AUDLibor.update_forward_refs()
FdmDirichletBoundary.update_forward_refs()
GaussLegendreIntegration.update_forward_refs()
Euribor365SW.update_forward_refs()
FdBlackScholesBarrierEngine.update_forward_refs()
IsdaCdsEngineAccrualBias.update_forward_refs()
EURLibor2W.update_forward_refs()
AnalyticDiscreteGeometricAveragePriceAsianEngine.update_forward_refs()
Euribor7M.update_forward_refs()
SVD.update_forward_refs()
SwingExercise.update_forward_refs()
Euribor4M.update_forward_refs()
HullWhiteForwardProcess.update_forward_refs()
FdmHestonOp.update_forward_refs()
FDEuropeanEngine.update_forward_refs()
FdmBlackScholesFwdOp.update_forward_refs()
CubicBSplinesFitting.update_forward_refs()
FdmCEV1dMesher.update_forward_refs()
NonCentralCumulativeChiSquareDistribution.update_forward_refs()
Germany.update_forward_refs()
ZeroCouponInflationSwapType.update_forward_refs()
HestonModelHelper.update_forward_refs()
USDLibor.update_forward_refs()
Euribor.update_forward_refs()
Concentrating1dMesher.update_forward_refs()
SafeMonotonicLogParabolic.update_forward_refs()
GaussianSimulatedAnnealing.update_forward_refs()
ClosestRounding.update_forward_refs()
CapHelper.update_forward_refs()
Bbsw4M.update_forward_refs()
FdHullWhiteSwaptionEngine.update_forward_refs()
YYUKRPI.update_forward_refs()
Swap.update_forward_refs()
MaxBasketPayoff.update_forward_refs()
MarkovFunctionalModelSettings.update_forward_refs()
ConvertibleZeroCouponBond.update_forward_refs()
FdBlackScholesVanillaEngineCashDividendModel.update_forward_refs()
ExplicitEulerScheme.update_forward_refs()
SwaptionVolCube1.update_forward_refs()
EurLiborSwapIfrFix.update_forward_refs()
ForwardEuropeanEngine.update_forward_refs()
FloatingRateBond.update_forward_refs()
CumulativeGammaDistribution.update_forward_refs()
EndCriteria.update_forward_refs()
LocalVolRNDCalculator.update_forward_refs()
CumulativeNormalDistribution.update_forward_refs()
FirstDerivativeOp.update_forward_refs()
SobolRsg.update_forward_refs()
AmericanExercise.update_forward_refs()
TreeCapFloorEngine.update_forward_refs()
SwapSpreadIndex.update_forward_refs()
EurLiborSwapIsdaFixB.update_forward_refs()
FdmZabrOp.update_forward_refs()
GFunctionFactoryYieldCurveModel.update_forward_refs()
JuQuadraticApproximationEngine.update_forward_refs()
India.update_forward_refs()
CappedFlooredCoupon.update_forward_refs()
FittedBondDiscountCurve.update_forward_refs()
SquareRootProcessRNDCalculator.update_forward_refs()
China.update_forward_refs()
DiscountFactor.update_forward_refs()
QuantoDoubleBarrierOption.update_forward_refs()
GaussChebyshev2ndIntegration.update_forward_refs()
DirichletBC.update_forward_refs()
FuturesType.update_forward_refs()
SegmentIntegral.update_forward_refs()
FixedRateBondForward.update_forward_refs()
BatesProcess.update_forward_refs()
Wibor.update_forward_refs()
YoYInflationCollar.update_forward_refs()
EURLibor10M.update_forward_refs()
SafeMonotonicLogCubicNaturalSpline.update_forward_refs()
NoArbSabrSmileSection.update_forward_refs()
Swaption.update_forward_refs()
ImpliedTermStructure.update_forward_refs()
Euribor11M.update_forward_refs()
CumulativeStudentDistribution.update_forward_refs()
AnalyticPTDHestonEngineIntegration.update_forward_refs()
CmsSpreadCoupon.update_forward_refs()
Business252.update_forward_refs()
LocalConstantVol.update_forward_refs()
MirrorGaussianSimulatedAnnealing.update_forward_refs()
Mexico.update_forward_refs()
BivariateCumulativeNormalDistribution.update_forward_refs()
FdmHestonFwdOp.update_forward_refs()
UpRounding.update_forward_refs()
OvernightIndex.update_forward_refs()
HundsdorferScheme.update_forward_refs()
BjerksundStenslandApproximationEngine.update_forward_refs()
SafeParabolic.update_forward_refs()
Predefined1dMesher.update_forward_refs()
Fdm1dMesher.update_forward_refs()
DailyTenorLibor.update_forward_refs()
FdmSchemeDesc.update_forward_refs()
CmsMarketCalibration.update_forward_refs()
AverageType.update_forward_refs()
MethodOfLinesScheme.update_forward_refs()
SpreadCdsHelper.update_forward_refs()
Euribor3652M.update_forward_refs()
OvernightIndexFutureRateHelper.update_forward_refs()
FdmBackwardSolver.update_forward_refs()
EuriborSwapIsdaFixB.update_forward_refs()
GaussHyperbolicIntegration.update_forward_refs()
ZACPI.update_forward_refs()
BinomialCRRVanillaEngine.update_forward_refs()
HullWhite.update_forward_refs()
PositionType.update_forward_refs()
ConvexMonotone.update_forward_refs()
FdmBlackScholesOp.update_forward_refs()
Taiwan.update_forward_refs()
YearOnYearInflationSwapType.update_forward_refs()
LognormalCmsSpreadPricer.update_forward_refs()
EURLibor.update_forward_refs()
AnalyticDigitalAmericanKOEngine.update_forward_refs()
GaussianQuadrature.update_forward_refs()
Bkbm3M.update_forward_refs()
KirkEngine.update_forward_refs()
DefaultProbabilityTermStructureHandle.update_forward_refs()
AmortizingPayment.update_forward_refs()
GBSMRNDCalculator.update_forward_refs()
ConvertibleFloatingRateBond.update_forward_refs()
SaudiArabia.update_forward_refs()
Libor.update_forward_refs()
CallableFixedRateBond.update_forward_refs()
DeltaVolQuoteDeltaType.update_forward_refs()
Gaussian1dFloatFloatSwaptionEngine.update_forward_refs()
HongKong.update_forward_refs()
Euribor3651Y.update_forward_refs()
ChfLiborSwapIsdaFix.update_forward_refs()
FractionalDividend.update_forward_refs()
DMinus.update_forward_refs()
OvernightIndexedSwapType.update_forward_refs()
FdG2SwaptionEngine.update_forward_refs()
ExtOUWithJumpsProcess.update_forward_refs()
USCPI.update_forward_refs()
GaussianRandomSequenceGenerator.update_forward_refs()
Robor.update_forward_refs()
CapFloorTermVolatilityStructureHandle.update_forward_refs()
VanillaForwardPayoff.update_forward_refs()
AnalyticPTDHestonEngineComplexLogFormula.update_forward_refs()
ConstantSwaptionVolatility.update_forward_refs()
EUHICP.update_forward_refs()
Argentina.update_forward_refs()
BasketOption.update_forward_refs()
BivariateCumulativeNormalDistributionWe04DP.update_forward_refs()
AndreasenHugeLocalVolAdapter.update_forward_refs()
DiscountingBondEngine.update_forward_refs()
ExerciseType.update_forward_refs()
FdmSquareRootFwdOp.update_forward_refs()
NeumannBC.update_forward_refs()
FdmQuantoHelper.update_forward_refs()
Period.update_forward_refs()
SwapIndex.update_forward_refs()
BlackProcess.update_forward_refs()
Gaussian1dSwaptionEngineProbabilities.update_forward_refs()
FdmBatesOp.update_forward_refs()
LocalVolTermStructureHandle.update_forward_refs()
FlatForward.update_forward_refs()
Bibor6M.update_forward_refs()
Vasicek.update_forward_refs()
Euribor2W.update_forward_refs()
EuriborSwapIsdaFixA.update_forward_refs()
EuriborSW.update_forward_refs()
EuropeanExercise.update_forward_refs()
BlackCdsOptionEngine.update_forward_refs()
FraRateHelper.update_forward_refs()
IntegralEngine.update_forward_refs()
YieldTermStructureHandle.update_forward_refs()
YYUSCPI.update_forward_refs()
SimpleQuote.update_forward_refs()
MarkovFunctional.update_forward_refs()
Euribor3658M.update_forward_refs()
YYZACPI.update_forward_refs()
GJRGARCHProcess.update_forward_refs()
GaussLobattoIntegral.update_forward_refs()
SobolBrownianGeneratorOrdering.update_forward_refs()
HullWhiteProcess.update_forward_refs()
Bkbm2M.update_forward_refs()
JpyLiborSwapIsdaFixAm.update_forward_refs()
QuantoVanillaOption.update_forward_refs()
FlatSmileSection.update_forward_refs()
Bkbm5M.update_forward_refs()
IborCoupon.update_forward_refs()
ConstantOptionletVolatility.update_forward_refs()
EURLibor7M.update_forward_refs()
SobolBrownianGeneratorFactory.update_forward_refs()
G2SwaptionEngine.update_forward_refs()
FdmBoundaryConditionSet.update_forward_refs()
ForwardRateAgreement.update_forward_refs()
ForwardSpreadedTermStructure.update_forward_refs()
Money.update_forward_refs()
BlackCalibrationHelperCalibrationErrorType.update_forward_refs()
Italy.update_forward_refs()
VarianceGammaProcess.update_forward_refs()
ProtectionSide.update_forward_refs()
LogLinearInterpolatedZeroCurve.update_forward_refs()
MonotonicCubicInterpolatedZeroCurve.update_forward_refs()
Bibor1Y.update_forward_refs()
SafeLogParabolic.update_forward_refs()
CappedFlooredCmsSpreadCoupon.update_forward_refs()
StrippedOptionletAdapter.update_forward_refs()
Indonesia.update_forward_refs()
SEKLibor.update_forward_refs()
Gaussian1dJamshidianSwaptionEngine.update_forward_refs()
SvenssonFitting.update_forward_refs()
CappedFlooredCmsCoupon.update_forward_refs()
ConstantParameter.update_forward_refs()
SecondDerivativeOp.update_forward_refs()
SafeBilinearInterpolation.update_forward_refs()
GaussianSimulatedAnnealingResetScheme.update_forward_refs()
ParkinsonSigma.update_forward_refs()
SimpleCashFlow.update_forward_refs()
COSHestonEngine.update_forward_refs()
PiecewiseConstantParameter.update_forward_refs()
AnalyticDoubleBarrierEngine.update_forward_refs()
SpreadBasketPayoff.update_forward_refs()
Sofr.update_forward_refs()
BinomialTrigeorgisVanillaEngine.update_forward_refs()
CHFLibor.update_forward_refs()
Euribor3656M.update_forward_refs()
DefaultLogCubicInterpolatedZeroCurve.update_forward_refs()
ZeroCouponBond.update_forward_refs()
SettlementType.update_forward_refs()
InverseCumulativePoisson.update_forward_refs()
AndreasenHugeVolatilityAdapter.update_forward_refs()
Cap.update_forward_refs()
GarmanKlassSigma5.update_forward_refs()
Actual365FixedConvention.update_forward_refs()
FloatFloatSwaption.update_forward_refs()
SafeForwardFlatInterpolation.update_forward_refs()
InverseNonCentralCumulativeChiSquareDistribution.update_forward_refs()
BlackVolTermStructureHandle.update_forward_refs()
FixedDividend.update_forward_refs()
Callability.update_forward_refs()
EURLibor8M.update_forward_refs()
HestonSLVProcess.update_forward_refs()
Jibar.update_forward_refs()
FdBlackScholesVanillaEngine.update_forward_refs()
BlackCapFloorEngine.update_forward_refs()
VarianceGammaEngine.update_forward_refs()
Euribor3651M.update_forward_refs()
Euribor1M.update_forward_refs()
Euribor3653W.update_forward_refs()
SecondOrderMixedDerivativeOp.update_forward_refs()
NonhomogeneousBoundaryConstraint.update_forward_refs()
OISRateHelper.update_forward_refs()
SwapRateHelper.update_forward_refs()
SamplerGaussian.update_forward_refs()
FdmCEVOp.update_forward_refs()
OvernightIndexFutureNettingType.update_forward_refs()
Euribor3652W.update_forward_refs()
CraigSneydScheme.update_forward_refs()
PoissonDistribution.update_forward_refs()
BlackVarianceCurve.update_forward_refs()
SoftCallability.update_forward_refs()
BiborSW.update_forward_refs()
ShortRateModelHandle.update_forward_refs()
GapPayoff.update_forward_refs()
LecuyerUniformRng.update_forward_refs()
CPIBond.update_forward_refs()
TripleBandLinearOp.update_forward_refs()
GsrProcess.update_forward_refs()
Euribor6M.update_forward_refs()
Nzocr.update_forward_refs()
YYEUHICPXT.update_forward_refs()
DoubleBarrierType.update_forward_refs()
CPIInterpolationType.update_forward_refs()
Euribor1Y.update_forward_refs()
BinomialJRVanillaEngine.update_forward_refs()
IntegralCdsEngine.update_forward_refs()
SafeMonotonicParabolic.update_forward_refs()
Bkbm.update_forward_refs()
TRLibor.update_forward_refs()
FdmSimpleProcess1dMesher.update_forward_refs()
ConstantEstimator.update_forward_refs()
Russia.update_forward_refs()
Euribor3653M.update_forward_refs()
BlackDeltaCalculator.update_forward_refs()
GaussHermiteIntegration.update_forward_refs()
GaussChebyshevIntegration.update_forward_refs()
BrownianBridge.update_forward_refs()
BondHelper.update_forward_refs()
YoYInflationCap.update_forward_refs()
DatedOISRateHelper.update_forward_refs()
HestonModel.update_forward_refs()
EuropeanOption.update_forward_refs()
Actual365Fixed.update_forward_refs()
Euribor36511M.update_forward_refs()
YYFRHICP.update_forward_refs()
BachelierSwaptionEngine.update_forward_refs()
UsdLiborSwapIsdaFixPm.update_forward_refs()
Euribor3655M.update_forward_refs()
CdsOption.update_forward_refs()
IsdaCdsEngineForwardsInCouponPeriod.update_forward_refs()
DownRounding.update_forward_refs()
FaceValueAccrualClaim.update_forward_refs()
BlackKarasinski.update_forward_refs()
Euribor3W.update_forward_refs()
Gsr.update_forward_refs()
ModifiedCraigSneydScheme.update_forward_refs()
SamplerLogNormal.update_forward_refs()
IsdaCdsEngine.update_forward_refs()
ProbabilityBoltzmannDownhill.update_forward_refs()
Gaussian1dSwaptionEngine.update_forward_refs()
SafeCubicNaturalSpline.update_forward_refs()
BoundaryConstraint.update_forward_refs()
TridiagonalOperator.update_forward_refs()
Thirty360.update_forward_refs()
GJRGARCHModel.update_forward_refs()
AmortizingFixedRateBond.update_forward_refs()
NelsonSiegelFitting.update_forward_refs()
G2Process.update_forward_refs()
VanillaSwingOption.update_forward_refs()
BlackSwaptionEngine.update_forward_refs()
CapFloorTermVolSurface.update_forward_refs()
WulinYongDoubleBarrierEngine.update_forward_refs()
Gaussian1dNonstandardSwaptionEngine.update_forward_refs()
FloatFloatSwap.update_forward_refs()
EURLibor3M.update_forward_refs()
BatesEngine.update_forward_refs()
FdmMesherComposite.update_forward_refs()
TimeBasket.update_forward_refs()
OvernightIndexedCoupon.update_forward_refs()
AnalyticContinuousGeometricAveragePriceAsianEngine.update_forward_refs()
Uniform1dMesher.update_forward_refs()
GaussianLowDiscrepancySequenceGenerator.update_forward_refs()
FdHestonDoubleBarrierEngine.update_forward_refs()
Euribor9M.update_forward_refs()
FdmHestonLocalVolatilityVarianceMesher.update_forward_refs()
FdmSquareRootFwdOpTransformationType.update_forward_refs()
Actual360.update_forward_refs()
AmortizingFloatingRateBond.update_forward_refs()
CallabilityPrice.update_forward_refs()
InverseCumulativeNormal.update_forward_refs()
StochasticProcessArray.update_forward_refs()
SafeLinearInterpolation.update_forward_refs()
Thirty360Convention.update_forward_refs()
FdmOrnsteinUhlenbeckOp.update_forward_refs()
Floor.update_forward_refs()
AndreasenHugeVolatilityInterplCalibrationType.update_forward_refs()
EURLibor1M.update_forward_refs()
StulzEngine.update_forward_refs()
AnalyticCEVEngine.update_forward_refs()
YearOnYearInflationSwap.update_forward_refs()
DoubleBarrierOption.update_forward_refs()
PiecewiseTimeDependentHestonModel.update_forward_refs()
MultiplicativePriceSeasonality.update_forward_refs()
FdmSimpleStorageCondition.update_forward_refs()
DividendVanillaOption.update_forward_refs()
FdmDupire1dOp.update_forward_refs()
ExchangeRate.update_forward_refs()
CumulativePoissonDistribution.update_forward_refs()
FFTVarianceGammaEngine.update_forward_refs()
UpfrontCdsHelper.update_forward_refs()
NinePointLinearOp.update_forward_refs()
FdmSnapshotCondition.update_forward_refs()
ContinuousArithmeticAsianLevyEngine.update_forward_refs()
UnitedStates.update_forward_refs()
JPYLibor.update_forward_refs()
Fdm1DimSolver.update_forward_refs()
Euribor8M.update_forward_refs()
BlackIborCouponPricer.update_forward_refs()
FdmBlackScholesMesher.update_forward_refs()
FdmHestonHullWhiteOp.update_forward_refs()
AnalyticDiscreteGeometricAverageStrikeAsianEngine.update_forward_refs()
GJRGARCHProcessDiscretization.update_forward_refs()
HestonModelHandle.update_forward_refs()
MTBrownianGeneratorFactory.update_forward_refs()
SafeConvexMonotoneInterpolation.update_forward_refs()
Bbsw6M.update_forward_refs()
ExtendedOrnsteinUhlenbeckProcess.update_forward_refs()
Slovakia.update_forward_refs()
FDShoutEngine.update_forward_refs()
Bibor2M.update_forward_refs()
MoroInverseCumulativeNormal.update_forward_refs()
SafeKrugerLogCubic.update_forward_refs()
BlackConstantVol.update_forward_refs()
ZeroCurve.update_forward_refs()
CPISwapType.update_forward_refs()
AndreasenHugeVolatilityInterpl.update_forward_refs()
AnalyticHestonEngineIntegration.update_forward_refs()
AnalyticHestonEngineComplexLogFormula.update_forward_refs()
MakeOIS.update_forward_refs()
YYEUHICP.update_forward_refs()
THBFIX.update_forward_refs()
NZDLibor.update_forward_refs()
FdmIndicesOnBoundary.update_forward_refs()
SampledCurve.update_forward_refs()
GeometricBrownianMotionProcess.update_forward_refs()
FdmBermudanStepCondition.update_forward_refs()
NthOrderDerivativeOp.update_forward_refs()
LocalVolSurface.update_forward_refs()
IborIndex.update_forward_refs()
BinomialDistribution.update_forward_refs()
GarmanKlassSigma3.update_forward_refs()
QuantoForwardEuropeanEngine.update_forward_refs()
IterativeBootstrap.update_forward_refs()
UniformRandomGenerator.update_forward_refs()
AssetSwap.update_forward_refs()
CmsMarket.update_forward_refs()
ImplicitEulerScheme.update_forward_refs()
Bbsw3M.update_forward_refs()
SwaptionVolatilityMatrix.update_forward_refs()
FdmSabrOp.update_forward_refs()
Fd2dBlackScholesVanillaEngine.update_forward_refs()
FixedRateBond.update_forward_refs()
VannaVolgaBarrierEngine.update_forward_refs()
Euribor3654M.update_forward_refs()
SabrSmileSection.update_forward_refs()
LogNormalSimulatedAnnealingResetScheme.update_forward_refs()
KlugeExtOUProcess.update_forward_refs()
LogNormalSimulatedAnnealing.update_forward_refs()
DKKLibor.update_forward_refs()
YoYInflationTermStructureHandle.update_forward_refs()
Gaussian1dFloatFloatSwaptionEngineProbabilities.update_forward_refs()
MirrorGaussianSimulatedAnnealingResetScheme.update_forward_refs()
RebatedExercise.update_forward_refs()
FlatHazardRate.update_forward_refs()
HestonRNDCalculator.update_forward_refs()
Collar.update_forward_refs()
CubicInterpolatedZeroCurve.update_forward_refs()
Shibor.update_forward_refs()
CEVRNDCalculator.update_forward_refs()
FdmDiscountDirichletBoundarySide.update_forward_refs()
SafeFritschButlandCubic.update_forward_refs()
DefaultBoundaryConditionSide.update_forward_refs()
PlainVanillaPayoff.update_forward_refs()
FdmAmericanStepCondition.update_forward_refs()
UsdLiborSwapIsdaFixAm.update_forward_refs()
FdmDiscountDirichletBoundary.update_forward_refs()
VanillaOption.update_forward_refs()
ZeroCouponInflationSwap.update_forward_refs()
Pribor.update_forward_refs()
Exercise.update_forward_refs()
BachelierCapFloorEngine.update_forward_refs()
Euribor3657M.update_forward_refs()
Bbsw5M.update_forward_refs()
CADLibor.update_forward_refs()
Euribor3659M.update_forward_refs()
Glued1dMesher.update_forward_refs()
DeltaVolQuoteHandle.update_forward_refs()
EURLibor9M.update_forward_refs()
AnalyticPTDHestonEngine.update_forward_refs()
FloorTruncation.update_forward_refs()
CmsCoupon.update_forward_refs()
CPISwap.update_forward_refs()
SafeLogLinearInterpolation.update_forward_refs()
QuantoForwardVanillaOption.update_forward_refs()
Euribor36510M.update_forward_refs()
BlackCalculator.update_forward_refs()
OvernightIndexedSwap.update_forward_refs()
Stock.update_forward_refs()
HaltonRsg.update_forward_refs()
Tibor.update_forward_refs()
DiscountingSwapEngine.update_forward_refs()
Bibor1M.update_forward_refs()
SobolBrownianBridgeRsg.update_forward_refs()
GarmanKlassSigma4.update_forward_refs()
ConvertibleFixedCouponBond.update_forward_refs()
InterestRate.update_forward_refs()
Cdor.update_forward_refs()
FdmSimpleSwingCondition.update_forward_refs()
G2ForwardProcess.update_forward_refs()
UnitedKingdom.update_forward_refs()
LevenbergMarquardt.update_forward_refs()
Simplex.update_forward_refs()
SobolRsgDirectionIntegers.update_forward_refs()
AnalyticHaganPricer.update_forward_refs()
CzechRepublic.update_forward_refs()
ExponentialJump1dMesher.update_forward_refs()
FdmSchemeDescFdmSchemeType.update_forward_refs()
ZeroInflationTermStructureHandle.update_forward_refs()
ActualActual.update_forward_refs()
Brazil.update_forward_refs()
EUHICPXT.update_forward_refs()
DouglasScheme.update_forward_refs()
Schedule.update_forward_refs()
CustomRegion.update_forward_refs()
MakeVanillaSwap.update_forward_refs()
SafeKrugerCubic.update_forward_refs()
Bbsw2M.update_forward_refs()
TreeCallableFixedRateBondEngine.update_forward_refs()
PillarChoice.update_forward_refs()
SimpsonIntegral.update_forward_refs()
DPlusDMinus.update_forward_refs()
CapFloorTermVolCurve.update_forward_refs()
Redemption.update_forward_refs()
JpyLiborSwapIsdaFixPm.update_forward_refs()
HimalayaOption.update_forward_refs()
SwaptionVolatilityStructureHandle.update_forward_refs()
FdmArithmeticAverageCondition.update_forward_refs()
CrankNicolsonScheme.update_forward_refs()
TimeGrid.update_forward_refs()
Fdm2dBlackScholesOp.update_forward_refs()
BinomialTianVanillaEngine.update_forward_refs()
EurLiborSwapIsdaFixA.update_forward_refs()
MersenneTwisterUniformRng.update_forward_refs()
FdmLogBasketInnerValue.update_forward_refs()
SafeMonotonicCubicNaturalSpline.update_forward_refs()
AverageBasketPayoff.update_forward_refs()
GeneralizedBlackScholesProcess.update_forward_refs()
BivariateCumulativeNormalDistributionDr78.update_forward_refs()
FixedRateCoupon.update_forward_refs()
TreeSwaptionEngine.update_forward_refs()
SamplerMirrorGaussian.update_forward_refs()
AndreasenHugeVolatilityInterplCalibrationSet.update_forward_refs()
GaussLaguerreIntegration.update_forward_refs()
FdmHestonVarianceMesher.update_forward_refs()
FdCEVVanillaEngine.update_forward_refs()
AnalyticHestonEngine.update_forward_refs()
CompositeConstraint.update_forward_refs()
AnalyticBarrierEngine.update_forward_refs()
GarmanKlassSigma6.update_forward_refs()
Iceland.update_forward_refs()
CappedFlooredIborCoupon.update_forward_refs()
EURLibor4M.update_forward_refs()
Bibor9M.update_forward_refs()
DiscreteAveragingAsianOption.update_forward_refs()
BarrierOption.update_forward_refs()
SofrFutureRateHelper.update_forward_refs()
Matrix.update_forward_refs()
NormalDistribution.update_forward_refs()
Gaussian1dNonstandardSwaptionEngineProbabilities.update_forward_refs()
GBPLibor.update_forward_refs()
Euribor2M.update_forward_refs()
FRHICP.update_forward_refs()
Bbsw1M.update_forward_refs()
Bkbm4M.update_forward_refs()
ImplicitEulerSchemeSolverType.update_forward_refs()
GaussGegenbauerIntegration.update_forward_refs()
EURLibor5M.update_forward_refs()
Bkbm1M.update_forward_refs()
FdOrnsteinUhlenbeckVanillaEngine.update_forward_refs()
Sonia.update_forward_refs()
FixedRateBondHelper.update_forward_refs()
EuriborSwapIfrFix.update_forward_refs()
QuoteHandle.update_forward_refs()
BespokeCalendar.update_forward_refs()
Euribor365.update_forward_refs()
UKRPI.update_forward_refs()
Zibor.update_forward_refs()
Eonia.update_forward_refs()
MinBasketPayoff.update_forward_refs()
DeltaVolQuote.update_forward_refs()
Bkbm6M.update_forward_refs()
DZero.update_forward_refs()
Israel.update_forward_refs()
IntervalPrice.update_forward_refs()
GlobalBootstrap.update_forward_refs()
NoArbSabrInterpolatedSmileSection.update_forward_refs()
EURLiborSW.update_forward_refs()
Euribor5M.update_forward_refs()
GaussianRandomGenerator.update_forward_refs()
DPlus.update_forward_refs()
ForwardVanillaOption.update_forward_refs()
HestonBlackVolSurface.update_forward_refs()
OvernightIndexedSwapIndex.update_forward_refs()
EverestOption.update_forward_refs()
GBPLiborON.update_forward_refs()
EURLibor1Y.update_forward_refs()
FdSabrVanillaEngine.update_forward_refs()
GarmanKlassSigma1.update_forward_refs()
IsdaCdsEngineNumericalFix.update_forward_refs()
Bibor.update_forward_refs()
NonstandardSwap.update_forward_refs()
SwaptionHelper.update_forward_refs()
LinearTsrPricer.update_forward_refs()
CashFlows.update_forward_refs()
Date.update_forward_refs()
BlackScholesMertonProcess.update_forward_refs()
EURLibor2M.update_forward_refs()
SouthKorea.update_forward_refs()
YoYInflationFloor.update_forward_refs()
Leg.update_forward_refs()
Canada.update_forward_refs()
FdmG2Op.update_forward_refs()
FdHestonBarrierEngine.update_forward_refs()
EURLibor6M.update_forward_refs()
Fdm2DimSolver.update_forward_refs()
SimplePolynomialFitting.update_forward_refs()
G2.update_forward_refs()
FdBlackScholesAsianEngine.update_forward_refs()
SwaptionVolCube2.update_forward_refs()
FdmLocalVolFwdOp.update_forward_refs()
CADLiborON.update_forward_refs()
EURLibor11M.update_forward_refs()
CashOrNothingPayoff.update_forward_refs()
GaussKronrodAdaptive.update_forward_refs()
VolatilityType.update_forward_refs()
AnalyticDividendEuropeanEngine.update_forward_refs()
GaussKronrodNonAdaptive.update_forward_refs()
BlackCallableFixedRateBondEngine.update_forward_refs()
AnalyticGJRGARCHEngine.update_forward_refs()
OrnsteinUhlenbeckProcess.update_forward_refs()
CmsRateBond.update_forward_refs()
SafeLogCubicNaturalSpline.update_forward_refs()
Array.update_forward_refs()
QuantoEuropeanEngine.update_forward_refs()
FdBatesVanillaEngine.update_forward_refs()
AssetOrNothingPayoff.update_forward_refs()
JointCalendar.update_forward_refs()
FdmLogInnerValue.update_forward_refs()
BinomialJoshi4VanillaEngine.update_forward_refs()
AnalyticDigitalAmericanEngine.update_forward_refs()
AnalyticBinaryBarrierEngine.update_forward_refs()
DepositRateHelper.update_forward_refs()
HestonProcess.update_forward_refs()
AnalyticDoubleBarrierBinaryEngine.update_forward_refs()
